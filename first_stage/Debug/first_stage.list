
first_stage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800363c  0800363c  0001363c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08003644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004088  24000078  080036bc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004100  080036bc  00024100  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001ae2f  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003066  00000000  00000000  0003aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001030  00000000  00000000  0003df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000f18  00000000  00000000  0003ef70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032e7c  00000000  00000000  0003fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011763  00000000  00000000  00072d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014ba08  00000000  00000000  00084467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001cfe6f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045d4  00000000  00000000  001cfec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08003584 	.word	0x08003584

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08003584 	.word	0x08003584

08000310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <vApplicationGetIdleTaskMemory+0x2c>)
 8000320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <vApplicationGetIdleTaskMemory+0x30>)
 8000326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	24000094 	.word	0x24000094
 8000340:	24000148 	.word	0x24000148

08000344 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_FREERTOS_Init+0x30>)
 800034c:	1d3c      	adds	r4, r7, #4
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 fdc2 	bl	8001eea <osThreadCreate>
 8000366:	4603      	mov	r3, r0
 8000368:	4a03      	ldr	r2, [pc, #12]	; (8000378 <MX_FREERTOS_Init+0x34>)
 800036a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bdb0      	pop	{r4, r5, r7, pc}
 8000374:	080035a8 	.word	0x080035a8
 8000378:	240040a0 	.word	0x240040a0

0800037c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f001 fdfc 	bl	8001f82 <osDelay>
 800038a:	e7fb      	b.n	8000384 <StartDefaultTask+0x8>

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 f9be 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f806 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000398:	f7ff ffd4 	bl	8000344 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800039c:	f001 fd9e 	bl	8001edc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0x14>
	...

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b09c      	sub	sp, #112	; 0x70
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ae:	224c      	movs	r2, #76	; 0x4c
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 f818 	bl	80033e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2220      	movs	r2, #32
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f003 f812 	bl	80033e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003c4:	2002      	movs	r0, #2
 80003c6:	f000 fadf 	bl	8000988 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ca:	2300      	movs	r3, #0
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <SystemClock_Config+0xb8>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003d6:	4a21      	ldr	r2, [pc, #132]	; (800045c <SystemClock_Config+0xb8>)
 80003d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b1f      	ldr	r3, [pc, #124]	; (800045c <SystemClock_Config+0xb8>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003e6:	603b      	str	r3, [r7, #0]
 80003e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ea:	bf00      	nop
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <SystemClock_Config+0xb8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f8:	d1f8      	bne.n	80003ec <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fa:	2302      	movs	r3, #2
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003fe:	2301      	movs	r3, #1
 8000400:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2340      	movs	r3, #64	; 0x40
 8000404:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000406:	2300      	movs	r3, #0
 8000408:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040e:	4618      	mov	r0, r3
 8000410:	f000 faf4 	bl	80009fc <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800041a:	f000 f833 	bl	8000484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	233f      	movs	r3, #63	; 0x3f
 8000420:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2101      	movs	r1, #1
 8000442:	4618      	mov	r0, r3
 8000444:	f000 fe86 	bl	8001154 <HAL_RCC_ClockConfig>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800044e:	f000 f819 	bl	8000484 <Error_Handler>
  }
}
 8000452:	bf00      	nop
 8000454:	3770      	adds	r7, #112	; 0x70
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	58024800 	.word	0x58024800

08000460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d101      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000472:	f000 f989 	bl	8000788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010000 	.word	0x40010000

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x38>)
 8000498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <HAL_MspInit+0x38>)
 800049e:	f043 0302 	orr.w	r3, r3, #2
 80004a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_MspInit+0x38>)
 80004a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004ac:	f003 0302 	and.w	r3, r3, #2
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	210f      	movs	r1, #15
 80004b8:	f06f 0001 	mvn.w	r0, #1
 80004bc:	f000 fa3c 	bl	8000938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c0:	bf00      	nop
 80004c2:	3708      	adds	r7, #8
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	58024400 	.word	0x58024400

080004cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08e      	sub	sp, #56	; 0x38
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	d842      	bhi.n	8000560 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80004da:	2200      	movs	r2, #0
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	2019      	movs	r0, #25
 80004e0:	f000 fa2a 	bl	8000938 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004e4:	2019      	movs	r0, #25
 80004e6:	f000 fa41 	bl	800096c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80004ea:	4a23      	ldr	r2, [pc, #140]	; (8000578 <HAL_InitTick+0xac>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <HAL_InitTick+0xb0>)
 80004f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80004f6:	4a21      	ldr	r2, [pc, #132]	; (800057c <HAL_InitTick+0xb0>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <HAL_InitTick+0xb0>)
 8000502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f001 f991 	bl	8001840 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800051e:	f001 f979 	bl	8001814 <HAL_RCC_GetPCLK2Freq>
 8000522:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000526:	4a16      	ldr	r2, [pc, #88]	; (8000580 <HAL_InitTick+0xb4>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0c9b      	lsrs	r3, r3, #18
 800052e:	3b01      	subs	r3, #1
 8000530:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_InitTick+0xb8>)
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <HAL_InitTick+0xbc>)
 8000536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0xb8>)
 800053a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800053e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000540:	4a10      	ldr	r2, [pc, #64]	; (8000584 <HAL_InitTick+0xb8>)
 8000542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000544:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_InitTick+0xb8>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_InitTick+0xb8>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000552:	480c      	ldr	r0, [pc, #48]	; (8000584 <HAL_InitTick+0xb8>)
 8000554:	f001 f9b6 	bl	80018c4 <HAL_TIM_Base_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d107      	bne.n	800056e <HAL_InitTick+0xa2>
 800055e:	e001      	b.n	8000564 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8000560:	2301      	movs	r3, #1
 8000562:	e005      	b.n	8000570 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <HAL_InitTick+0xb8>)
 8000566:	f001 fa0f 	bl	8001988 <HAL_TIM_Base_Start_IT>
 800056a:	4603      	mov	r3, r0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3738      	adds	r7, #56	; 0x38
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	24000008 	.word	0x24000008
 800057c:	58024400 	.word	0x58024400
 8000580:	431bde83 	.word	0x431bde83
 8000584:	240040a4 	.word	0x240040a4
 8000588:	40010000 	.word	0x40010000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <TIM1_UP_IRQHandler+0x10>)
 80005be:	f001 fa69 	bl	8001a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	240040a4 	.word	0x240040a4

080005cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d0:	4b32      	ldr	r3, [pc, #200]	; (800069c <SystemInit+0xd0>)
 80005d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d6:	4a31      	ldr	r2, [pc, #196]	; (800069c <SystemInit+0xd0>)
 80005d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <SystemInit+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d807      	bhi.n	80005fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <SystemInit+0xd4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <SystemInit+0xd4>)
 80005f6:	f043 0307 	orr.w	r3, r3, #7
 80005fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005fc:	4b29      	ldr	r3, [pc, #164]	; (80006a4 <SystemInit+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <SystemInit+0xd8>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000608:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <SystemInit+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemInit+0xd8>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4924      	ldr	r1, [pc, #144]	; (80006a4 <SystemInit+0xd8>)
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemInit+0xdc>)
 8000616:	4013      	ands	r3, r2
 8000618:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <SystemInit+0xd4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	2b00      	cmp	r3, #0
 8000624:	d007      	beq.n	8000636 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <SystemInit+0xd4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f023 030f 	bic.w	r3, r3, #15
 800062e:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <SystemInit+0xd4>)
 8000630:	f043 0307 	orr.w	r3, r3, #7
 8000634:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <SystemInit+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SystemInit+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <SystemInit+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <SystemInit+0xd8>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <SystemInit+0xe0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <SystemInit+0xd8>)
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <SystemInit+0xe4>)
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SystemInit+0xd8>)
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <SystemInit+0xe8>)
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <SystemInit+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <SystemInit+0xd8>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <SystemInit+0xe8>)
 8000664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <SystemInit+0xd8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <SystemInit+0xd8>)
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <SystemInit+0xe8>)
 8000670:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <SystemInit+0xd8>)
 8000674:	2200      	movs	r2, #0
 8000676:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <SystemInit+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <SystemInit+0xd8>)
 800067e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000682:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <SystemInit+0xd8>)
 8000686:	2200      	movs	r2, #0
 8000688:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <SystemInit+0xec>)
 800068c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000690:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	52002000 	.word	0x52002000
 80006a4:	58024400 	.word	0x58024400
 80006a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ac:	02020200 	.word	0x02020200
 80006b0:	01ff0000 	.word	0x01ff0000
 80006b4:	01010280 	.word	0x01010280
 80006b8:	52004000 	.word	0x52004000

080006bc <Reset_Handler>:
 80006bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f4 <LoopFillZerobss+0xe>
 80006c0:	f7ff ff84 	bl	80005cc <SystemInit>
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopFillZerobss+0x12>)
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopFillZerobss+0x16>)
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopFillZerobss+0x1a>)
 80006ca:	2300      	movs	r3, #0
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:
 80006ce:	58d4      	ldr	r4, [r2, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:
 80006d4:	18c4      	adds	r4, r0, r3
 80006d6:	428c      	cmp	r4, r1
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopFillZerobss+0x1e>)
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopFillZerobss+0x22>)
 80006de:	2300      	movs	r3, #0
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:
 80006e6:	42a2      	cmp	r2, r4
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>
 80006ea:	f002 fe57 	bl	800339c <__libc_init_array>
 80006ee:	f7ff fe4d 	bl	800038c <main>
 80006f2:	4770      	bx	lr
 80006f4:	24050000 	.word	0x24050000
 80006f8:	24000000 	.word	0x24000000
 80006fc:	24000078 	.word	0x24000078
 8000700:	08003644 	.word	0x08003644
 8000704:	24000078 	.word	0x24000078
 8000708:	24004100 	.word	0x24004100

0800070c <ADC3_IRQHandler>:
 800070c:	e7fe      	b.n	800070c <ADC3_IRQHandler>
	...

08000710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000716:	2003      	movs	r0, #3
 8000718:	f000 f903 	bl	8000922 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800071c:	f000 fed0 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 8000720:	4602      	mov	r2, r0
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_Init+0x68>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	4913      	ldr	r1, [pc, #76]	; (800077c <HAL_Init+0x6c>)
 800072e:	5ccb      	ldrb	r3, [r1, r3]
 8000730:	f003 031f 	and.w	r3, r3, #31
 8000734:	fa22 f303 	lsr.w	r3, r2, r3
 8000738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_Init+0x68>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <HAL_Init+0x6c>)
 8000744:	5cd3      	ldrb	r3, [r2, r3]
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	fa22 f303 	lsr.w	r3, r2, r3
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <HAL_Init+0x70>)
 8000752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <HAL_Init+0x74>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800075a:	200f      	movs	r0, #15
 800075c:	f7ff feb6 	bl	80004cc <HAL_InitTick>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e002      	b.n	8000770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800076a:	f7ff fe91 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58024400 	.word	0x58024400
 800077c:	080035cc 	.word	0x080035cc
 8000780:	24000004 	.word	0x24000004
 8000784:	24000000 	.word	0x24000000

08000788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2400000c 	.word	0x2400000c
 80007ac:	240040f0 	.word	0x240040f0

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	240040f0 	.word	0x240040f0

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <__NVIC_SetPriorityGrouping+0x40>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x40>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	05fa0000 	.word	0x05fa0000

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <__NVIC_EnableIRQ+0x38>)
 8000846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ff4c 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000946:	f7ff ff63 	bl	8000810 <__NVIC_GetPriorityGrouping>
 800094a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	6978      	ldr	r0, [r7, #20]
 8000952:	f7ff ffb3 	bl	80008bc <NVIC_EncodePriority>
 8000956:	4602      	mov	r2, r0
 8000958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff82 	bl	8000868 <__NVIC_SetPriority>
}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff56 	bl	800082c <__NVIC_EnableIRQ>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_PWREx_ConfigSupply+0x70>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	2b04      	cmp	r3, #4
 800099a:	d00a      	beq.n	80009b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_PWREx_ConfigSupply+0x70>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d001      	beq.n	80009ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e01f      	b.n	80009ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e01d      	b.n	80009ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_PWREx_ConfigSupply+0x70>)
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	f023 0207 	bic.w	r2, r3, #7
 80009ba:	490f      	ldr	r1, [pc, #60]	; (80009f8 <HAL_PWREx_ConfigSupply+0x70>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80009c2:	f7ff fef5 	bl	80007b0 <HAL_GetTick>
 80009c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80009c8:	e009      	b.n	80009de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80009ca:	f7ff fef1 	bl	80007b0 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009d8:	d901      	bls.n	80009de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e007      	b.n	80009ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_PWREx_ConfigSupply+0x70>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ea:	d1ee      	bne.n	80009ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024800 	.word	0x58024800

080009fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e397      	b.n	800113e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8087 	beq.w	8000b2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a1c:	4b9e      	ldr	r3, [pc, #632]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a26:	4b9c      	ldr	r3, [pc, #624]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2e:	2b10      	cmp	r3, #16
 8000a30:	d007      	beq.n	8000a42 <HAL_RCC_OscConfig+0x46>
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	2b18      	cmp	r3, #24
 8000a36:	d110      	bne.n	8000a5a <HAL_RCC_OscConfig+0x5e>
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d10b      	bne.n	8000a5a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a42:	4b95      	ldr	r3, [pc, #596]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d06c      	beq.n	8000b28 <HAL_RCC_OscConfig+0x12c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d168      	bne.n	8000b28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e371      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a62:	d106      	bne.n	8000a72 <HAL_RCC_OscConfig+0x76>
 8000a64:	4b8c      	ldr	r3, [pc, #560]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a8b      	ldr	r2, [pc, #556]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e02e      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd4>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10c      	bne.n	8000a94 <HAL_RCC_OscConfig+0x98>
 8000a7a:	4b87      	ldr	r3, [pc, #540]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a86      	ldr	r2, [pc, #536]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	4b84      	ldr	r3, [pc, #528]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a83      	ldr	r2, [pc, #524]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e01d      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd4>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0xbc>
 8000a9e:	4b7e      	ldr	r3, [pc, #504]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a7d      	ldr	r2, [pc, #500]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	4b7b      	ldr	r3, [pc, #492]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a7a      	ldr	r2, [pc, #488]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e00b      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd4>
 8000ab8:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a76      	ldr	r2, [pc, #472]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a73      	ldr	r2, [pc, #460]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d013      	beq.n	8000b00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fe6a 	bl	80007b0 <HAL_GetTick>
 8000adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ae0:	f7ff fe66 	bl	80007b0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b64      	cmp	r3, #100	; 0x64
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e325      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000af2:	4b69      	ldr	r3, [pc, #420]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0f0      	beq.n	8000ae0 <HAL_RCC_OscConfig+0xe4>
 8000afe:	e014      	b.n	8000b2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b00:	f7ff fe56 	bl	80007b0 <HAL_GetTick>
 8000b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b06:	e008      	b.n	8000b1a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b08:	f7ff fe52 	bl	80007b0 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b64      	cmp	r3, #100	; 0x64
 8000b14:	d901      	bls.n	8000b1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e311      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f0      	bne.n	8000b08 <HAL_RCC_OscConfig+0x10c>
 8000b26:	e000      	b.n	8000b2a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 808a 	beq.w	8000c4c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b38:	4b57      	ldr	r3, [pc, #348]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000b40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b42:	4b55      	ldr	r3, [pc, #340]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <HAL_RCC_OscConfig+0x162>
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	2b18      	cmp	r3, #24
 8000b52:	d137      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x1c8>
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d132      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b5e:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d005      	beq.n	8000b76 <HAL_RCC_OscConfig+0x17a>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e2e3      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b76:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 0219 	bic.w	r2, r3, #25
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	4945      	ldr	r1, [pc, #276]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000b84:	4313      	orrs	r3, r2
 8000b86:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000b88:	f7ff fe12 	bl	80007b0 <HAL_GetTick>
 8000b8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b90:	f7ff fe0e 	bl	80007b0 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e2cd      	b.n	800113e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bae:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	061b      	lsls	r3, r3, #24
 8000bbc:	4936      	ldr	r1, [pc, #216]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bc2:	e043      	b.n	8000c4c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d026      	beq.n	8000c1a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 0219 	bic.w	r2, r3, #25
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	492f      	ldr	r1, [pc, #188]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bde:	f7ff fde7 	bl	80007b0 <HAL_GetTick>
 8000be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000be4:	e008      	b.n	8000bf8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be6:	f7ff fde3 	bl	80007b0 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d901      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	e2a2      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f0      	beq.n	8000be6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	061b      	lsls	r3, r3, #24
 8000c12:	4921      	ldr	r1, [pc, #132]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
 8000c18:	e018      	b.n	8000c4c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1e      	ldr	r2, [pc, #120]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c20:	f023 0301 	bic.w	r3, r3, #1
 8000c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c26:	f7ff fdc3 	bl	80007b0 <HAL_GetTick>
 8000c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c2c:	e008      	b.n	8000c40 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fdbf 	bl	80007b0 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d901      	bls.n	8000c40 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e27e      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f0      	bne.n	8000c2e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d06d      	beq.n	8000d34 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c60:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d007      	beq.n	8000c7e <HAL_RCC_OscConfig+0x282>
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2b18      	cmp	r3, #24
 8000c72:	d11e      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x2b6>
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d119      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_RCC_OscConfig+0x29c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d008      	beq.n	8000c9c <HAL_RCC_OscConfig+0x2a0>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	2b80      	cmp	r3, #128	; 0x80
 8000c90:	d004      	beq.n	8000c9c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e253      	b.n	800113e <HAL_RCC_OscConfig+0x742>
 8000c96:	bf00      	nop
 8000c98:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c9c:	4ba3      	ldr	r3, [pc, #652]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a1b      	ldr	r3, [r3, #32]
 8000ca8:	061b      	lsls	r3, r3, #24
 8000caa:	49a0      	ldr	r1, [pc, #640]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000cb0:	e040      	b.n	8000d34 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d023      	beq.n	8000d02 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000cba:	4b9c      	ldr	r3, [pc, #624]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a9b      	ldr	r2, [pc, #620]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fd73 	bl	80007b0 <HAL_GetTick>
 8000cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000cce:	f7ff fd6f 	bl	80007b0 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e22e      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000ce0:	4b92      	ldr	r3, [pc, #584]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000cec:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	061b      	lsls	r3, r3, #24
 8000cfa:	498c      	ldr	r1, [pc, #560]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60cb      	str	r3, [r1, #12]
 8000d00:	e018      	b.n	8000d34 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000d02:	4b8a      	ldr	r3, [pc, #552]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a89      	ldr	r2, [pc, #548]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fd4f 	bl	80007b0 <HAL_GetTick>
 8000d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d16:	f7ff fd4b 	bl	80007b0 <HAL_GetTick>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e20a      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d28:	4b80      	ldr	r3, [pc, #512]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f0      	bne.n	8000d16 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d036      	beq.n	8000dae <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d019      	beq.n	8000d7c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d48:	4b78      	ldr	r3, [pc, #480]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4c:	4a77      	ldr	r2, [pc, #476]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d54:	f7ff fd2c 	bl	80007b0 <HAL_GetTick>
 8000d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fd28 	bl	80007b0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e1e7      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0x360>
 8000d7a:	e018      	b.n	8000dae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d88:	f7ff fd12 	bl	80007b0 <HAL_GetTick>
 8000d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fd0e 	bl	80007b0 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e1cd      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d036      	beq.n	8000e28 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d019      	beq.n	8000df6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a59      	ldr	r2, [pc, #356]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dcc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fcef 	bl	80007b0 <HAL_GetTick>
 8000dd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000dd6:	f7ff fceb 	bl	80007b0 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e1aa      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000de8:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x3da>
 8000df4:	e018      	b.n	8000e28 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fcd5 	bl	80007b0 <HAL_GetTick>
 8000e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e0a:	f7ff fcd1 	bl	80007b0 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e190      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8085 	beq.w	8000f40 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <HAL_RCC_OscConfig+0x534>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	; (8000f30 <HAL_RCC_OscConfig+0x534>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000e42:	f7ff fcb5 	bl	80007b0 <HAL_GetTick>
 8000e46:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e48:	e008      	b.n	8000e5c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e4a:	f7ff fcb1 	bl	80007b0 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b64      	cmp	r3, #100	; 0x64
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e170      	b.n	800113e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <HAL_RCC_OscConfig+0x534>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f0      	beq.n	8000e4a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x482>
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7c:	e02d      	b.n	8000eda <HAL_RCC_OscConfig+0x4de>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x4a4>
 8000e86:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8a:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6713      	str	r3, [r2, #112]	; 0x70
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9e:	e01c      	b.n	8000eda <HAL_RCC_OscConfig+0x4de>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b05      	cmp	r3, #5
 8000ea6:	d10c      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x4c6>
 8000ea8:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eac:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec0:	e00b      	b.n	8000eda <HAL_RCC_OscConfig+0x4de>
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000ed4:	f023 0304 	bic.w	r3, r3, #4
 8000ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d015      	beq.n	8000f0e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fc65 	bl	80007b0 <HAL_GetTick>
 8000ee6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ee8:	e00a      	b.n	8000f00 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff fc61 	bl	80007b0 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d901      	bls.n	8000f00 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8000efc:	2303      	movs	r3, #3
 8000efe:	e11e      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_RCC_OscConfig+0x530>)
 8000f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0ee      	beq.n	8000eea <HAL_RCC_OscConfig+0x4ee>
 8000f0c:	e018      	b.n	8000f40 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fc4f 	bl	80007b0 <HAL_GetTick>
 8000f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f14:	e00e      	b.n	8000f34 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fc4b 	bl	80007b0 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d905      	bls.n	8000f34 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e108      	b.n	800113e <HAL_RCC_OscConfig+0x742>
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f34:	4b84      	ldr	r3, [pc, #528]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1ea      	bne.n	8000f16 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80f9 	beq.w	800113c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000f4a:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f52:	2b18      	cmp	r3, #24
 8000f54:	f000 80b4 	beq.w	80010c0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f040 8095 	bne.w	800108c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f62:	4b79      	ldr	r3, [pc, #484]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a78      	ldr	r2, [pc, #480]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6e:	f7ff fc1f 	bl	80007b0 <HAL_GetTick>
 8000f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f76:	f7ff fc1b 	bl	80007b0 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e0da      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000f88:	4b6f      	ldr	r3, [pc, #444]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f94:	4b6c      	ldr	r3, [pc, #432]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f98:	4b6c      	ldr	r3, [pc, #432]	; (800114c <HAL_RCC_OscConfig+0x750>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	4967      	ldr	r1, [pc, #412]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	628b      	str	r3, [r1, #40]	; 0x28
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8000fde:	495a      	ldr	r1, [pc, #360]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8000fe4:	4b58      	ldr	r3, [pc, #352]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	4a57      	ldr	r2, [pc, #348]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000ff0:	4b55      	ldr	r3, [pc, #340]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8000ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff4:	4b56      	ldr	r3, [pc, #344]	; (8001150 <HAL_RCC_OscConfig+0x754>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000ffc:	00d2      	lsls	r2, r2, #3
 8000ffe:	4952      	ldr	r1, [pc, #328]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	f023 020c 	bic.w	r2, r3, #12
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	494d      	ldr	r1, [pc, #308]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	f023 0202 	bic.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4949      	ldr	r1, [pc, #292]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001024:	4313      	orrs	r3, r2
 8001026:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	4a46      	ldr	r2, [pc, #280]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800102e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	4a43      	ldr	r2, [pc, #268]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	4a40      	ldr	r2, [pc, #256]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800104c:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a3a      	ldr	r2, [pc, #232]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800105e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001064:	f7ff fba4 	bl	80007b0 <HAL_GetTick>
 8001068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fba0 	bl	80007b0 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e05f      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800107e:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x670>
 800108a:	e057      	b.n	800113c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 8001092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fb8a 	bl	80007b0 <HAL_GetTick>
 800109c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff fb86 	bl	80007b0 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e045      	b.n	800113e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x6a4>
 80010be:	e03d      	b.n	800113c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_RCC_OscConfig+0x74c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d031      	beq.n	8001138 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f003 0203 	and.w	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010de:	429a      	cmp	r2, r3
 80010e0:	d12a      	bne.n	8001138 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d122      	bne.n	8001138 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80010fe:	429a      	cmp	r2, r3
 8001100:	d11a      	bne.n	8001138 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	0a5b      	lsrs	r3, r3, #9
 8001106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001110:	429a      	cmp	r2, r3
 8001112:	d111      	bne.n	8001138 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	0c1b      	lsrs	r3, r3, #16
 8001118:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d108      	bne.n	8001138 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	0e1b      	lsrs	r3, r3, #24
 800112a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001132:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001134:	429a      	cmp	r2, r3
 8001136:	d001      	beq.n	800113c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3730      	adds	r7, #48	; 0x30
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	58024400 	.word	0x58024400
 800114c:	fffffc0c 	.word	0xfffffc0c
 8001150:	ffff0007 	.word	0xffff0007

08001154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e19c      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001168:	4b8a      	ldr	r3, [pc, #552]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d910      	bls.n	8001198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b87      	ldr	r3, [pc, #540]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 020f 	bic.w	r2, r3, #15
 800117e:	4985      	ldr	r1, [pc, #532]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b83      	ldr	r3, [pc, #524]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e184      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d010      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d908      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80011b4:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4975      	ldr	r1, [pc, #468]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011de:	429a      	cmp	r2, r3
 80011e0:	d908      	bls.n	80011f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80011e2:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	496a      	ldr	r1, [pc, #424]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d010      	beq.n	8001222 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	4b64      	ldr	r3, [pc, #400]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800120c:	429a      	cmp	r2, r3
 800120e:	d908      	bls.n	8001222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	495e      	ldr	r1, [pc, #376]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 800121e:	4313      	orrs	r3, r2
 8001220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d010      	beq.n	8001250 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001234:	6a1b      	ldr	r3, [r3, #32]
 8001236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800123a:	429a      	cmp	r2, r3
 800123c:	d908      	bls.n	8001250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	4953      	ldr	r1, [pc, #332]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 800124c:	4313      	orrs	r3, r2
 800124e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68da      	ldr	r2, [r3, #12]
 8001260:	4b4d      	ldr	r3, [pc, #308]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	429a      	cmp	r2, r3
 800126a:	d908      	bls.n	800127e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f023 020f 	bic.w	r2, r3, #15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4947      	ldr	r1, [pc, #284]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 800127a:	4313      	orrs	r3, r2
 800127c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d055      	beq.n	8001336 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4940      	ldr	r1, [pc, #256]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001298:	4313      	orrs	r3, r2
 800129a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012a4:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d121      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0f6      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d115      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0ea      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d107      	bne.n	80012e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d109      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0de      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0d6      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	f023 0207 	bic.w	r2, r3, #7
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4925      	ldr	r1, [pc, #148]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001302:	4313      	orrs	r3, r2
 8001304:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff fa53 	bl	80007b0 <HAL_GetTick>
 800130a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130c:	e00a      	b.n	8001324 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130e:	f7ff fa4f 	bl	80007b0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0be      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	429a      	cmp	r2, r3
 8001334:	d1eb      	bne.n	800130e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d010      	beq.n	8001364 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	429a      	cmp	r2, r3
 8001350:	d208      	bcs.n	8001364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f023 020f 	bic.w	r2, r3, #15
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <HAL_RCC_ClockConfig+0x244>)
 8001360:	4313      	orrs	r3, r2
 8001362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d214      	bcs.n	800139c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f023 020f 	bic.w	r2, r3, #15
 800137a:	4906      	ldr	r1, [pc, #24]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <HAL_RCC_ClockConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d005      	beq.n	800139c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e086      	b.n	80014a2 <HAL_RCC_ClockConfig+0x34e>
 8001394:	52002000 	.word	0x52002000
 8001398:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d208      	bcs.n	80013ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	4939      	ldr	r1, [pc, #228]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d010      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	4b34      	ldr	r3, [pc, #208]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d208      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80013e6:	4b31      	ldr	r3, [pc, #196]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	492e      	ldr	r1, [pc, #184]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	d010      	beq.n	8001426 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001410:	429a      	cmp	r2, r3
 8001412:	d208      	bcs.n	8001426 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001414:	4b25      	ldr	r3, [pc, #148]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4922      	ldr	r1, [pc, #136]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001422:	4313      	orrs	r3, r2
 8001424:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800143e:	429a      	cmp	r2, r3
 8001440:	d208      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4917      	ldr	r1, [pc, #92]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001450:	4313      	orrs	r3, r2
 8001452:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001454:	f000 f834 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	4912      	ldr	r1, [pc, #72]	; (80014b0 <HAL_RCC_ClockConfig+0x35c>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_RCC_ClockConfig+0x358>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_RCC_ClockConfig+0x35c>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <HAL_RCC_ClockConfig+0x360>)
 800148a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_RCC_ClockConfig+0x364>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_RCC_ClockConfig+0x368>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f818 	bl	80004cc <HAL_InitTick>
 800149c:	4603      	mov	r3, r0
 800149e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	58024400 	.word	0x58024400
 80014b0:	080035cc 	.word	0x080035cc
 80014b4:	24000004 	.word	0x24000004
 80014b8:	24000000 	.word	0x24000000
 80014bc:	24000008 	.word	0x24000008

080014c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014c6:	4bb3      	ldr	r3, [pc, #716]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ce:	2b18      	cmp	r3, #24
 80014d0:	f200 8155 	bhi.w	800177e <HAL_RCC_GetSysClockFreq+0x2be>
 80014d4:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80014d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014da:	bf00      	nop
 80014dc:	08001541 	.word	0x08001541
 80014e0:	0800177f 	.word	0x0800177f
 80014e4:	0800177f 	.word	0x0800177f
 80014e8:	0800177f 	.word	0x0800177f
 80014ec:	0800177f 	.word	0x0800177f
 80014f0:	0800177f 	.word	0x0800177f
 80014f4:	0800177f 	.word	0x0800177f
 80014f8:	0800177f 	.word	0x0800177f
 80014fc:	08001567 	.word	0x08001567
 8001500:	0800177f 	.word	0x0800177f
 8001504:	0800177f 	.word	0x0800177f
 8001508:	0800177f 	.word	0x0800177f
 800150c:	0800177f 	.word	0x0800177f
 8001510:	0800177f 	.word	0x0800177f
 8001514:	0800177f 	.word	0x0800177f
 8001518:	0800177f 	.word	0x0800177f
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800177f 	.word	0x0800177f
 8001524:	0800177f 	.word	0x0800177f
 8001528:	0800177f 	.word	0x0800177f
 800152c:	0800177f 	.word	0x0800177f
 8001530:	0800177f 	.word	0x0800177f
 8001534:	0800177f 	.word	0x0800177f
 8001538:	0800177f 	.word	0x0800177f
 800153c:	08001573 	.word	0x08001573
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001540:	4b94      	ldr	r3, [pc, #592]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	2b00      	cmp	r3, #0
 800154a:	d009      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800154c:	4b91      	ldr	r3, [pc, #580]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800155e:	e111      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001560:	4b8d      	ldr	r3, [pc, #564]	; (8001798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001562:	61bb      	str	r3, [r7, #24]
    break;
 8001564:	e10e      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001566:	4b8d      	ldr	r3, [pc, #564]	; (800179c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001568:	61bb      	str	r3, [r7, #24]
    break;
 800156a:	e10b      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800156c:	4b8c      	ldr	r3, [pc, #560]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800156e:	61bb      	str	r3, [r7, #24]
    break;
 8001570:	e108      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001572:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800157c:	4b85      	ldr	r3, [pc, #532]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001586:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001588:	4b82      	ldr	r3, [pc, #520]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001592:	4b80      	ldr	r3, [pc, #512]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80e1 	beq.w	8001778 <HAL_RCC_GetSysClockFreq+0x2b8>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	f000 8083 	beq.w	80016c4 <HAL_RCC_GetSysClockFreq+0x204>
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	f200 80a1 	bhi.w	8001708 <HAL_RCC_GetSysClockFreq+0x248>
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x114>
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d056      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80015d2:	e099      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02d      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80015e0:	4b6c      	ldr	r3, [pc, #432]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	ee07 3a90 	vmov	s15, r3
 80015f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160a:	4b62      	ldr	r3, [pc, #392]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800161a:	ed97 6a02 	vldr	s12, [r7, #8]
 800161e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800162a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800162e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800163a:	e087      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001646:	eddf 6a58 	vldr	s13, [pc, #352]	; 80017a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	4b51      	ldr	r3, [pc, #324]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800165e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001662:	eddf 5a50 	vldr	s11, [pc, #320]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800166a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800166e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800167e:	e065      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	ee07 3a90 	vmov	s15, r3
 8001686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80017ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800168e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001692:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80016a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80016aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016c2:	e043      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80017b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80016d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d6:	4b2f      	ldr	r3, [pc, #188]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	ee07 3a90 	vmov	s15, r3
 80016e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80016ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80016ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001706:	e021      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001712:	eddf 6a26 	vldr	s13, [pc, #152]	; 80017ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8001716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800172a:	ed97 6a02 	vldr	s12, [r7, #8]
 800172e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80017a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800173a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800173e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800174a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	0a5b      	lsrs	r3, r3, #9
 8001752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001756:	3301      	adds	r3, #1
 8001758:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001764:	edd7 6a07 	vldr	s13, [r7, #28]
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001770:	ee17 3a90 	vmov	r3, s15
 8001774:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001776:	e005      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
    break;
 800177c:	e002      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001780:	61bb      	str	r3, [r7, #24]
    break;
 8001782:	bf00      	nop
  }

  return sysclockfreq;
 8001784:	69bb      	ldr	r3, [r7, #24]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	58024400 	.word	0x58024400
 8001798:	03d09000 	.word	0x03d09000
 800179c:	003d0900 	.word	0x003d0900
 80017a0:	017d7840 	.word	0x017d7840
 80017a4:	46000000 	.word	0x46000000
 80017a8:	4c742400 	.word	0x4c742400
 80017ac:	4a742400 	.word	0x4a742400
 80017b0:	4bbebc20 	.word	0x4bbebc20

080017b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80017ba:	f7ff fe81 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_GetHCLKFreq+0x50>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490f      	ldr	r1, [pc, #60]	; (8001808 <HAL_RCC_GetHCLKFreq+0x54>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_GetHCLKFreq+0x50>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_GetHCLKFreq+0x54>)
 80017e2:	5cd3      	ldrb	r3, [r2, r3]
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <HAL_RCC_GetHCLKFreq+0x58>)
 80017f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_GetHCLKFreq+0x58>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400
 8001808:	080035cc 	.word	0x080035cc
 800180c:	24000004 	.word	0x24000004
 8001810:	24000000 	.word	0x24000000

08001814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001818:	f7ff ffcc 	bl	80017b4 <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4904      	ldr	r1, [pc, #16]	; (800183c <HAL_RCC_GetPCLK2Freq+0x28>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400
 800183c:	080035cc 	.word	0x080035cc

08001840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	223f      	movs	r2, #63	; 0x3f
 800184e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f003 0207 	and.w	r2, r3, #7
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 020f 	and.w	r2, r3, #15
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_GetClockConfig+0x7c>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_RCC_GetClockConfig+0x80>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	58024400 	.word	0x58024400
 80018c0:	52002000 	.word	0x52002000

080018c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e049      	b.n	800196a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f841 	bl	8001972 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3304      	adds	r3, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f000 fa0e 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d001      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e05e      	b.n	8001a5e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_TIM_Base_Start_IT+0xe4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d02c      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ca:	d027      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a27      	ldr	r2, [pc, #156]	; (8001a70 <HAL_TIM_Base_Start_IT+0xe8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d022      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_TIM_Base_Start_IT+0xec>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d01d      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <HAL_TIM_Base_Start_IT+0xf0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d018      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_TIM_Base_Start_IT+0xf4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_TIM_Base_Start_IT+0xf8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00e      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_TIM_Base_Start_IT+0xfc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <HAL_TIM_Base_Start_IT+0x100>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d004      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x94>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_TIM_Base_Start_IT+0x104>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d115      	bne.n	8001a48 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_TIM_Base_Start_IT+0x108>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d015      	beq.n	8001a5a <HAL_TIM_Base_Start_IT+0xd2>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a34:	d011      	beq.n	8001a5a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	e008      	b.n	8001a5a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e000      	b.n	8001a5c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40000800 	.word	0x40000800
 8001a78:	40000c00 	.word	0x40000c00
 8001a7c:	40010400 	.word	0x40010400
 8001a80:	40001800 	.word	0x40001800
 8001a84:	40014000 	.word	0x40014000
 8001a88:	4000e000 	.word	0x4000e000
 8001a8c:	4000e400 	.word	0x4000e400
 8001a90:	00010007 	.word	0x00010007

08001a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d122      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d11b      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0202 	mvn.w	r2, #2
 8001ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f905 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8f7 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f908 	bl	8001cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d122      	bne.n	8001b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d11b      	bne.n	8001b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0204 	mvn.w	r2, #4
 8001b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2202      	movs	r2, #2
 8001b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8db 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001b30:	e005      	b.n	8001b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8cd 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f8de 	bl	8001cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d122      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d11b      	bne.n	8001b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0208 	mvn.w	r2, #8
 8001b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8b1 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001b84:	e005      	b.n	8001b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f8a3 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8b4 	bl	8001cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d122      	bne.n	8001bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d11b      	bne.n	8001bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0210 	mvn.w	r2, #16
 8001bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2208      	movs	r2, #8
 8001bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f887 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e005      	b.n	8001be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f879 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f88a 	bl	8001cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10e      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d107      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0201 	mvn.w	r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fc24 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	2b80      	cmp	r3, #128	; 0x80
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b80      	cmp	r3, #128	; 0x80
 8001c32:	d107      	bne.n	8001c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f920 	bl	8001e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d10e      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b80      	cmp	r3, #128	; 0x80
 8001c60:	d107      	bne.n	8001c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f913 	bl	8001e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	d10e      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d107      	bne.n	8001c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f838 	bl	8001d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d10e      	bne.n	8001cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d107      	bne.n	8001cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0220 	mvn.w	r2, #32
 8001cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8d3 	bl	8001e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <TIM_Base_SetConfig+0x124>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <TIM_Base_SetConfig+0x40>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d42:	d00f      	beq.n	8001d64 <TIM_Base_SetConfig+0x40>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <TIM_Base_SetConfig+0x128>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00b      	beq.n	8001d64 <TIM_Base_SetConfig+0x40>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a40      	ldr	r2, [pc, #256]	; (8001e50 <TIM_Base_SetConfig+0x12c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <TIM_Base_SetConfig+0x40>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3f      	ldr	r2, [pc, #252]	; (8001e54 <TIM_Base_SetConfig+0x130>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d003      	beq.n	8001d64 <TIM_Base_SetConfig+0x40>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <TIM_Base_SetConfig+0x134>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d108      	bne.n	8001d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <TIM_Base_SetConfig+0x124>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d023      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <TIM_Base_SetConfig+0x128>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <TIM_Base_SetConfig+0x12c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01b      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <TIM_Base_SetConfig+0x130>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d017      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <TIM_Base_SetConfig+0x134>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <TIM_Base_SetConfig+0x138>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00f      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2b      	ldr	r2, [pc, #172]	; (8001e60 <TIM_Base_SetConfig+0x13c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00b      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a2a      	ldr	r2, [pc, #168]	; (8001e64 <TIM_Base_SetConfig+0x140>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <TIM_Base_SetConfig+0x144>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0xaa>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <TIM_Base_SetConfig+0x148>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <TIM_Base_SetConfig+0x124>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d00f      	beq.n	8001e2c <TIM_Base_SetConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <TIM_Base_SetConfig+0x134>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00b      	beq.n	8001e2c <TIM_Base_SetConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <TIM_Base_SetConfig+0x138>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d007      	beq.n	8001e2c <TIM_Base_SetConfig+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	; (8001e60 <TIM_Base_SetConfig+0x13c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d003      	beq.n	8001e2c <TIM_Base_SetConfig+0x108>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <TIM_Base_SetConfig+0x140>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d103      	bne.n	8001e34 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	615a      	str	r2, [r3, #20]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	40000400 	.word	0x40000400
 8001e50:	40000800 	.word	0x40000800
 8001e54:	40000c00 	.word	0x40000c00
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40014000 	.word	0x40014000
 8001e60:	40014400 	.word	0x40014400
 8001e64:	40014800 	.word	0x40014800
 8001e68:	4000e000 	.word	0x4000e000
 8001e6c:	4000e400 	.word	0x4000e400

08001e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ebe:	2b84      	cmp	r3, #132	; 0x84
 8001ec0:	d005      	beq.n	8001ece <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ec2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	3303      	adds	r3, #3
 8001ecc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ee0:	f000 faf6 	bl	80024d0 <vTaskStartScheduler>
  
  return osOK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eec:	b089      	sub	sp, #36	; 0x24
 8001eee:	af04      	add	r7, sp, #16
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <osThreadCreate+0x54>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685c      	ldr	r4, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681d      	ldr	r5, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691e      	ldr	r6, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ffc8 	bl	8001eac <makeFreeRtosPriority>
 8001f1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f26:	9202      	str	r2, [sp, #8]
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	9100      	str	r1, [sp, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4632      	mov	r2, r6
 8001f30:	4629      	mov	r1, r5
 8001f32:	4620      	mov	r0, r4
 8001f34:	f000 f8ed 	bl	8002112 <xTaskCreateStatic>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e01c      	b.n	8001f78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685c      	ldr	r4, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f4a:	b29e      	uxth	r6, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ffaa 	bl	8001eac <makeFreeRtosPriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	9200      	str	r2, [sp, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4632      	mov	r2, r6
 8001f66:	4629      	mov	r1, r5
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 f92f 	bl	80021cc <xTaskCreate>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d001      	beq.n	8001f78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <osDelay+0x16>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	e000      	b.n	8001f9a <osDelay+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa64 	bl	8002468 <vTaskDelay>
  
  return osOK;
 8001fa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f103 0208 	add.w	r2, r3, #8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 0208 	add.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f103 0208 	add.w	r2, r3, #8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d103      	bne.n	800206c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e00c      	b.n	8002086 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3308      	adds	r3, #8
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e002      	b.n	800207a <vListInsert+0x2e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d2f6      	bcs.n	8002074 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6892      	ldr	r2, [r2, #8]
 80020d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6852      	ldr	r2, [r2, #4]
 80020de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d103      	bne.n	80020f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08e      	sub	sp, #56	; 0x38
 8002116:	af04      	add	r7, sp, #16
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212a:	f383 8811 	msr	BASEPRI, r3
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002138:	bf00      	nop
 800213a:	e7fe      	b.n	800213a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <xTaskCreateStatic+0x46>
	__asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	61fb      	str	r3, [r7, #28]
}
 8002154:	bf00      	nop
 8002156:	e7fe      	b.n	8002156 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002158:	23b4      	movs	r3, #180	; 0xb4
 800215a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2bb4      	cmp	r3, #180	; 0xb4
 8002160:	d00a      	beq.n	8002178 <xTaskCreateStatic+0x66>
	__asm volatile
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	61bb      	str	r3, [r7, #24]
}
 8002174:	bf00      	nop
 8002176:	e7fe      	b.n	8002176 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002178:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01e      	beq.n	80021be <xTaskCreateStatic+0xac>
 8002180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01b      	beq.n	80021be <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	2202      	movs	r2, #2
 8002194:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002198:	2300      	movs	r3, #0
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	9302      	str	r3, [sp, #8]
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f851 	bl	8002258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021b8:	f000 f8ec 	bl	8002394 <prvAddNewTaskToReadyList>
 80021bc:	e001      	b.n	80021c2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80021c2:	697b      	ldr	r3, [r7, #20]
	}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af04      	add	r7, sp, #16
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fef1 	bl	8002fc8 <pvPortMalloc>
 80021e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00e      	beq.n	800220c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021ee:	20b4      	movs	r0, #180	; 0xb4
 80021f0:	f000 feea 	bl	8002fc8 <pvPortMalloc>
 80021f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e005      	b.n	8002210 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f000 ffab 	bl	8003160 <vPortFree>
 800220a:	e001      	b.n	8002210 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d017      	beq.n	8002246 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	2300      	movs	r3, #0
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f80f 	bl	8002258 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800223a:	69f8      	ldr	r0, [r7, #28]
 800223c:	f000 f8aa 	bl	8002394 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002240:	2301      	movs	r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e002      	b.n	800224c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800224c:	69bb      	ldr	r3, [r7, #24]
	}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002270:	440b      	add	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	617b      	str	r3, [r7, #20]
}
 800229c:	bf00      	nop
 800229e:	e7fe      	b.n	800229e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01f      	beq.n	80022e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e012      	b.n	80022d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	7819      	ldrb	r1, [r3, #0]
 80022b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	3334      	adds	r3, #52	; 0x34
 80022bc:	460a      	mov	r2, r1
 80022be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	3301      	adds	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d9e9      	bls.n	80022ac <prvInitialiseNewTask+0x54>
 80022d8:	e000      	b.n	80022dc <prvInitialiseNewTask+0x84>
			{
				break;
 80022da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022e4:	e003      	b.n	80022ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d901      	bls.n	80022f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022f4:	2306      	movs	r3, #6
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002302:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	2200      	movs	r2, #0
 8002308:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	3304      	adds	r3, #4
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fe6b 	bl	8001fea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	3318      	adds	r3, #24
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fe66 	bl	8001fea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002322:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	f1c3 0207 	rsb	r2, r3, #7
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	2200      	movs	r2, #0
 8002338:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	2200      	movs	r2, #0
 8002340:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	334c      	adds	r3, #76	; 0x4c
 8002348:	2260      	movs	r2, #96	; 0x60
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f001 f84b 	bl	80033e8 <memset>
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	4a0c      	ldr	r2, [pc, #48]	; (8002388 <prvInitialiseNewTask+0x130>)
 8002356:	651a      	str	r2, [r3, #80]	; 0x50
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <prvInitialiseNewTask+0x134>)
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <prvInitialiseNewTask+0x138>)
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f000 fc1f 	bl	8002bac <pxPortInitialiseStack>
 800236e:	4602      	mov	r2, r0
 8002370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002372:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	080035fc 	.word	0x080035fc
 800238c:	0800361c 	.word	0x0800361c
 8002390:	080035dc 	.word	0x080035dc

08002394 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800239c:	f000 fd32 	bl	8002e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <prvAddNewTaskToReadyList+0xb8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <prvAddNewTaskToReadyList+0xb8>)
 80023a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <prvAddNewTaskToReadyList+0xbc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80023b2:	4a27      	ldr	r2, [pc, #156]	; (8002450 <prvAddNewTaskToReadyList+0xbc>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <prvAddNewTaskToReadyList+0xb8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d110      	bne.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80023c0:	f000 facc 	bl	800295c <prvInitialiseTaskLists>
 80023c4:	e00d      	b.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <prvAddNewTaskToReadyList+0xc0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <prvAddNewTaskToReadyList+0xbc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	429a      	cmp	r2, r3
 80023da:	d802      	bhi.n	80023e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <prvAddNewTaskToReadyList+0xbc>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <prvAddNewTaskToReadyList+0xc4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <prvAddNewTaskToReadyList+0xc4>)
 80023ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	2201      	movs	r2, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <prvAddNewTaskToReadyList+0xc8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <prvAddNewTaskToReadyList+0xc8>)
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <prvAddNewTaskToReadyList+0xcc>)
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3304      	adds	r3, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7ff fdf5 	bl	8002004 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800241a:	f000 fd23 	bl	8002e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <prvAddNewTaskToReadyList+0xc0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00e      	beq.n	8002444 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <prvAddNewTaskToReadyList+0xbc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <prvAddNewTaskToReadyList+0xd0>)
 8002436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	24000448 	.word	0x24000448
 8002450:	24000348 	.word	0x24000348
 8002454:	24000454 	.word	0x24000454
 8002458:	24000464 	.word	0x24000464
 800245c:	24000450 	.word	0x24000450
 8002460:	2400034c 	.word	0x2400034c
 8002464:	e000ed04 	.word	0xe000ed04

08002468 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d017      	beq.n	80024aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <vTaskDelay+0x60>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <vTaskDelay+0x30>
	__asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	60bb      	str	r3, [r7, #8]
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002498:	f000 f884 	bl	80025a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800249c:	2100      	movs	r1, #0
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fb1e 	bl	8002ae0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80024a4:	f000 f88c 	bl	80025c0 <xTaskResumeAll>
 80024a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <vTaskDelay+0x64>)
 80024b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024c0:	bf00      	nop
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	24000470 	.word	0x24000470
 80024cc:	e000ed04 	.word	0xe000ed04

080024d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80024de:	463a      	mov	r2, r7
 80024e0:	1d39      	adds	r1, r7, #4
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd ff12 	bl	8000310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	9202      	str	r2, [sp, #8]
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	460a      	mov	r2, r1
 80024fe:	4921      	ldr	r1, [pc, #132]	; (8002584 <vTaskStartScheduler+0xb4>)
 8002500:	4821      	ldr	r0, [pc, #132]	; (8002588 <vTaskStartScheduler+0xb8>)
 8002502:	f7ff fe06 	bl	8002112 <xTaskCreateStatic>
 8002506:	4603      	mov	r3, r0
 8002508:	4a20      	ldr	r2, [pc, #128]	; (800258c <vTaskStartScheduler+0xbc>)
 800250a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <vTaskStartScheduler+0xbc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e001      	b.n	800251e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d11b      	bne.n	800255c <vTaskStartScheduler+0x8c>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	613b      	str	r3, [r7, #16]
}
 8002536:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002538:	4b15      	ldr	r3, [pc, #84]	; (8002590 <vTaskStartScheduler+0xc0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	334c      	adds	r3, #76	; 0x4c
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <vTaskStartScheduler+0xc4>)
 8002540:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <vTaskStartScheduler+0xc8>)
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <vTaskStartScheduler+0xcc>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <vTaskStartScheduler+0xd0>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002556:	f000 fbb3 	bl	8002cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800255a:	e00e      	b.n	800257a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d10a      	bne.n	800257a <vTaskStartScheduler+0xaa>
	__asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	60fb      	str	r3, [r7, #12]
}
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <vTaskStartScheduler+0xa8>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	080035c4 	.word	0x080035c4
 8002588:	0800292d 	.word	0x0800292d
 800258c:	2400046c 	.word	0x2400046c
 8002590:	24000348 	.word	0x24000348
 8002594:	24000014 	.word	0x24000014
 8002598:	24000468 	.word	0x24000468
 800259c:	24000454 	.word	0x24000454
 80025a0:	2400044c 	.word	0x2400044c

080025a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <vTaskSuspendAll+0x18>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a03      	ldr	r2, [pc, #12]	; (80025bc <vTaskSuspendAll+0x18>)
 80025b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	24000470 	.word	0x24000470

080025c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80025ce:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <xTaskResumeAll+0x114>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <xTaskResumeAll+0x2c>
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	603b      	str	r3, [r7, #0]
}
 80025e8:	bf00      	nop
 80025ea:	e7fe      	b.n	80025ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80025ec:	f000 fc0a 	bl	8002e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <xTaskResumeAll+0x114>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <xTaskResumeAll+0x114>)
 80025f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <xTaskResumeAll+0x114>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d161      	bne.n	80026c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <xTaskResumeAll+0x118>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d05d      	beq.n	80026c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800260a:	e02e      	b.n	800266a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <xTaskResumeAll+0x11c>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3318      	adds	r3, #24
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd50 	bl	80020be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd4b 	bl	80020be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <xTaskResumeAll+0x120>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <xTaskResumeAll+0x120>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <xTaskResumeAll+0x124>)
 8002648:	441a      	add	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fcd7 	bl	8002004 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <xTaskResumeAll+0x128>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002664:	4b21      	ldr	r3, [pc, #132]	; (80026ec <xTaskResumeAll+0x12c>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <xTaskResumeAll+0x11c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1cc      	bne.n	800260c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002678:	f000 fa12 	bl	8002aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <xTaskResumeAll+0x130>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002688:	f000 f836 	bl	80026f8 <xTaskIncrementTick>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <xTaskResumeAll+0x12c>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f1      	bne.n	8002688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <xTaskResumeAll+0x130>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <xTaskResumeAll+0x12c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80026b2:	2301      	movs	r3, #1
 80026b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <xTaskResumeAll+0x134>)
 80026b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026c6:	f000 fbcd 	bl	8002e64 <vPortExitCritical>

	return xAlreadyYielded;
 80026ca:	68bb      	ldr	r3, [r7, #8]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	24000470 	.word	0x24000470
 80026d8:	24000448 	.word	0x24000448
 80026dc:	24000408 	.word	0x24000408
 80026e0:	24000450 	.word	0x24000450
 80026e4:	2400034c 	.word	0x2400034c
 80026e8:	24000348 	.word	0x24000348
 80026ec:	2400045c 	.word	0x2400045c
 80026f0:	24000458 	.word	0x24000458
 80026f4:	e000ed04 	.word	0xe000ed04

080026f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002702:	4b4e      	ldr	r3, [pc, #312]	; (800283c <xTaskIncrementTick+0x144>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 808e 	bne.w	8002828 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800270c:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <xTaskIncrementTick+0x148>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002714:	4a4a      	ldr	r2, [pc, #296]	; (8002840 <xTaskIncrementTick+0x148>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d120      	bne.n	8002762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002720:	4b48      	ldr	r3, [pc, #288]	; (8002844 <xTaskIncrementTick+0x14c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <xTaskIncrementTick+0x48>
	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	603b      	str	r3, [r7, #0]
}
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <xTaskIncrementTick+0x46>
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <xTaskIncrementTick+0x14c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	4b40      	ldr	r3, [pc, #256]	; (8002848 <xTaskIncrementTick+0x150>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <xTaskIncrementTick+0x14c>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <xTaskIncrementTick+0x150>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <xTaskIncrementTick+0x154>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a3c      	ldr	r2, [pc, #240]	; (800284c <xTaskIncrementTick+0x154>)
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	f000 f99f 	bl	8002aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <xTaskIncrementTick+0x158>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d348      	bcc.n	80027fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <xTaskIncrementTick+0x14c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002776:	4b36      	ldr	r3, [pc, #216]	; (8002850 <xTaskIncrementTick+0x158>)
 8002778:	f04f 32ff 	mov.w	r2, #4294967295
 800277c:	601a      	str	r2, [r3, #0]
					break;
 800277e:	e03e      	b.n	80027fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <xTaskIncrementTick+0x14c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d203      	bcs.n	80027a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002798:	4a2d      	ldr	r2, [pc, #180]	; (8002850 <xTaskIncrementTick+0x158>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800279e:	e02e      	b.n	80027fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3304      	adds	r3, #4
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc8a 	bl	80020be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3318      	adds	r3, #24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fc81 	bl	80020be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	2201      	movs	r2, #1
 80027c2:	409a      	lsls	r2, r3
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <xTaskIncrementTick+0x15c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	4a22      	ldr	r2, [pc, #136]	; (8002854 <xTaskIncrementTick+0x15c>)
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <xTaskIncrementTick+0x160>)
 80027dc:	441a      	add	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7ff fc0d 	bl	8002004 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <xTaskIncrementTick+0x164>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3b9      	bcc.n	800276c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027fc:	e7b6      	b.n	800276c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <xTaskIncrementTick+0x164>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002804:	4914      	ldr	r1, [pc, #80]	; (8002858 <xTaskIncrementTick+0x160>)
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d901      	bls.n	800281a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002816:	2301      	movs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <xTaskIncrementTick+0x168>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002822:	2301      	movs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e004      	b.n	8002832 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <xTaskIncrementTick+0x16c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <xTaskIncrementTick+0x16c>)
 8002830:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002832:	697b      	ldr	r3, [r7, #20]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	24000470 	.word	0x24000470
 8002840:	2400044c 	.word	0x2400044c
 8002844:	24000400 	.word	0x24000400
 8002848:	24000404 	.word	0x24000404
 800284c:	24000460 	.word	0x24000460
 8002850:	24000468 	.word	0x24000468
 8002854:	24000450 	.word	0x24000450
 8002858:	2400034c 	.word	0x2400034c
 800285c:	24000348 	.word	0x24000348
 8002860:	2400045c 	.word	0x2400045c
 8002864:	24000458 	.word	0x24000458

08002868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <vTaskSwitchContext+0xac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <vTaskSwitchContext+0xb0>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800287c:	e044      	b.n	8002908 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <vTaskSwitchContext+0xb0>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <vTaskSwitchContext+0xb4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f1c3 031f 	rsb	r3, r3, #31
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4921      	ldr	r1, [pc, #132]	; (8002920 <vTaskSwitchContext+0xb8>)
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	607b      	str	r3, [r7, #4]
}
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <vTaskSwitchContext+0x5a>
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <vTaskSwitchContext+0xb8>)
 80028d0:	4413      	add	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	3308      	adds	r3, #8
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d104      	bne.n	80028f4 <vTaskSwitchContext+0x8c>
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <vTaskSwitchContext+0xbc>)
 80028fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <vTaskSwitchContext+0xbc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	334c      	adds	r3, #76	; 0x4c
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <vTaskSwitchContext+0xc0>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	24000470 	.word	0x24000470
 8002918:	2400045c 	.word	0x2400045c
 800291c:	24000450 	.word	0x24000450
 8002920:	2400034c 	.word	0x2400034c
 8002924:	24000348 	.word	0x24000348
 8002928:	24000014 	.word	0x24000014

0800292c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002934:	f000 f852 	bl	80029dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <prvIdleTask+0x28>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d9f9      	bls.n	8002934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <prvIdleTask+0x2c>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002950:	e7f0      	b.n	8002934 <prvIdleTask+0x8>
 8002952:	bf00      	nop
 8002954:	2400034c 	.word	0x2400034c
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	e00c      	b.n	8002982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <prvInitialiseTaskLists+0x60>)
 8002974:	4413      	add	r3, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb17 	bl	8001faa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3301      	adds	r3, #1
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d9ef      	bls.n	8002968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <prvInitialiseTaskLists+0x64>)
 800298a:	f7ff fb0e 	bl	8001faa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <prvInitialiseTaskLists+0x68>)
 8002990:	f7ff fb0b 	bl	8001faa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <prvInitialiseTaskLists+0x6c>)
 8002996:	f7ff fb08 	bl	8001faa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800299a:	480c      	ldr	r0, [pc, #48]	; (80029cc <prvInitialiseTaskLists+0x70>)
 800299c:	f7ff fb05 	bl	8001faa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <prvInitialiseTaskLists+0x74>)
 80029a2:	f7ff fb02 	bl	8001faa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <prvInitialiseTaskLists+0x78>)
 80029a8:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <prvInitialiseTaskLists+0x64>)
 80029aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <prvInitialiseTaskLists+0x7c>)
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <prvInitialiseTaskLists+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2400034c 	.word	0x2400034c
 80029c0:	240003d8 	.word	0x240003d8
 80029c4:	240003ec 	.word	0x240003ec
 80029c8:	24000408 	.word	0x24000408
 80029cc:	2400041c 	.word	0x2400041c
 80029d0:	24000434 	.word	0x24000434
 80029d4:	24000400 	.word	0x24000400
 80029d8:	24000404 	.word	0x24000404

080029dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029e2:	e019      	b.n	8002a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80029e4:	f000 fa0e 	bl	8002e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <prvCheckTasksWaitingTermination+0x50>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fb62 	bl	80020be <uxListRemove>
				--uxCurrentNumberOfTasks;
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <prvCheckTasksWaitingTermination+0x54>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <prvCheckTasksWaitingTermination+0x54>)
 8002a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a0e:	f000 fa29 	bl	8002e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f810 	bl	8002a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e1      	bne.n	80029e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2400041c 	.word	0x2400041c
 8002a30:	24000448 	.word	0x24000448
 8002a34:	24000430 	.word	0x24000430

08002a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	334c      	adds	r3, #76	; 0x4c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fce5 	bl	8003414 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d108      	bne.n	8002a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb81 	bl	8003160 <vPortFree>
				vPortFree( pxTCB );
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb7e 	bl	8003160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a64:	e018      	b.n	8002a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d103      	bne.n	8002a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fb75 	bl	8003160 <vPortFree>
	}
 8002a76:	e00f      	b.n	8002a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d00a      	beq.n	8002a98 <prvDeleteTCB+0x60>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	60fb      	str	r3, [r7, #12]
}
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <prvDeleteTCB+0x5e>
	}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <prvResetNextTaskUnblockTime+0x38>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <prvResetNextTaskUnblockTime+0x3c>)
 8002ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ab8:	e008      	b.n	8002acc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <prvResetNextTaskUnblockTime+0x38>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <prvResetNextTaskUnblockTime+0x3c>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	24000400 	.word	0x24000400
 8002adc:	24000468 	.word	0x24000468

08002ae0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002aea:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3304      	adds	r3, #4
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fae1 	bl	80020be <uxListRemove>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4013      	ands	r3, r2
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d10a      	bne.n	8002b38 <prvAddCurrentTaskToDelayedList+0x58>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	481a      	ldr	r0, [pc, #104]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b32:	f7ff fa67 	bl	8002004 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b36:	e026      	b.n	8002b86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d209      	bcs.n	8002b64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b0f      	ldr	r3, [pc, #60]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f7ff fa75 	bl	800204c <vListInsert>
}
 8002b62:	e010      	b.n	8002b86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7ff fa6b 	bl	800204c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d202      	bcs.n	8002b86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b80:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6013      	str	r3, [r2, #0]
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	2400044c 	.word	0x2400044c
 8002b94:	24000348 	.word	0x24000348
 8002b98:	24000450 	.word	0x24000450
 8002b9c:	24000434 	.word	0x24000434
 8002ba0:	24000404 	.word	0x24000404
 8002ba4:	24000400 	.word	0x24000400
 8002ba8:	24000468 	.word	0x24000468

08002bac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b04      	subs	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3b04      	subs	r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <pxPortInitialiseStack+0x64>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b14      	subs	r3, #20
 8002be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b04      	subs	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f06f 0202 	mvn.w	r2, #2
 8002bfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3b20      	subs	r3, #32
 8002c00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	08002c15 	.word	0x08002c15

08002c14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <prvTaskExitError+0x54>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d00a      	beq.n	8002c3e <prvTaskExitError+0x2a>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	60fb      	str	r3, [r7, #12]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <prvTaskExitError+0x28>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60bb      	str	r3, [r7, #8]
}
 8002c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c52:	bf00      	nop
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0fc      	beq.n	8002c54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	24000010 	.word	0x24000010
 8002c6c:	00000000 	.word	0x00000000

08002c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <pxCurrentTCBConst2>)
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	6808      	ldr	r0, [r1, #0]
 8002c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7a:	f380 8809 	msr	PSP, r0
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8811 	msr	BASEPRI, r0
 8002c8a:	4770      	bx	lr
 8002c8c:	f3af 8000 	nop.w

08002c90 <pxCurrentTCBConst2>:
 8002c90:	24000348 	.word	0x24000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop

08002c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002c98:	4808      	ldr	r0, [pc, #32]	; (8002cbc <prvPortStartFirstTask+0x24>)
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	f380 8808 	msr	MSP, r0
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f380 8814 	msr	CONTROL, r0
 8002caa:	b662      	cpsie	i
 8002cac:	b661      	cpsie	f
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
 8002cb6:	df00      	svc	0
 8002cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002cba:	bf00      	nop
 8002cbc:	e000ed08 	.word	0xe000ed08

08002cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <xPortStartScheduler+0x120>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <xPortStartScheduler+0x124>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10a      	bne.n	8002ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	613b      	str	r3, [r7, #16]
}
 8002ce2:	bf00      	nop
 8002ce4:	e7fe      	b.n	8002ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <xPortStartScheduler+0x120>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a3f      	ldr	r2, [pc, #252]	; (8002de8 <xPortStartScheduler+0x128>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10a      	bne.n	8002d06 <xPortStartScheduler+0x46>
	__asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	60fb      	str	r3, [r7, #12]
}
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <xPortStartScheduler+0x12c>)
 8002d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <xPortStartScheduler+0x130>)
 8002d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d2e:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d34:	e009      	b.n	8002d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002d36:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d0ef      	beq.n	8002d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d00a      	beq.n	8002d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	60bb      	str	r3, [r7, #8]
}
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	; (8002df4 <xPortStartScheduler+0x134>)
 8002d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <xPortStartScheduler+0x138>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <xPortStartScheduler+0x138>)
 8002d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <xPortStartScheduler+0x138>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <xPortStartScheduler+0x138>)
 8002da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002dae:	f000 f8dd 	bl	8002f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <xPortStartScheduler+0x13c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002db8:	f000 f8fc 	bl	8002fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <xPortStartScheduler+0x140>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <xPortStartScheduler+0x140>)
 8002dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002dc8:	f7ff ff66 	bl	8002c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002dcc:	f7ff fd4c 	bl	8002868 <vTaskSwitchContext>
	prvTaskExitError();
 8002dd0:	f7ff ff20 	bl	8002c14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000ed00 	.word	0xe000ed00
 8002de4:	410fc271 	.word	0x410fc271
 8002de8:	410fc270 	.word	0x410fc270
 8002dec:	e000e400 	.word	0xe000e400
 8002df0:	24000474 	.word	0x24000474
 8002df4:	24000478 	.word	0x24000478
 8002df8:	e000ed20 	.word	0xe000ed20
 8002dfc:	24000010 	.word	0x24000010
 8002e00:	e000ef34 	.word	0xe000ef34

08002e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	607b      	str	r3, [r7, #4]
}
 8002e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <vPortEnterCritical+0x58>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <vPortEnterCritical+0x58>)
 8002e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <vPortEnterCritical+0x58>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10f      	bne.n	8002e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <vPortEnterCritical+0x5c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	603b      	str	r3, [r7, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	e7fe      	b.n	8002e4e <vPortEnterCritical+0x4a>
	}
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	24000010 	.word	0x24000010
 8002e60:	e000ed04 	.word	0xe000ed04

08002e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <vPortExitCritical+0x50>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <vPortExitCritical+0x24>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	607b      	str	r3, [r7, #4]
}
 8002e84:	bf00      	nop
 8002e86:	e7fe      	b.n	8002e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <vPortExitCritical+0x50>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <vPortExitCritical+0x50>)
 8002e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <vPortExitCritical+0x50>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <vPortExitCritical+0x42>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	24000010 	.word	0x24000010
	...

08002ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002ec0:	f3ef 8009 	mrs	r0, PSP
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <pxCurrentTCBConst>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	f01e 0f10 	tst.w	lr, #16
 8002ed0:	bf08      	it	eq
 8002ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eda:	6010      	str	r0, [r2, #0]
 8002edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ee4:	f380 8811 	msr	BASEPRI, r0
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f7ff fcba 	bl	8002868 <vTaskSwitchContext>
 8002ef4:	f04f 0000 	mov.w	r0, #0
 8002ef8:	f380 8811 	msr	BASEPRI, r0
 8002efc:	bc09      	pop	{r0, r3}
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	6808      	ldr	r0, [r1, #0]
 8002f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f06:	f01e 0f10 	tst.w	lr, #16
 8002f0a:	bf08      	it	eq
 8002f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f10:	f380 8809 	msr	PSP, r0
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w

08002f20 <pxCurrentTCBConst>:
 8002f20:	24000348 	.word	0x24000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop

08002f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	607b      	str	r3, [r7, #4]
}
 8002f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f42:	f7ff fbd9 	bl	80026f8 <xTaskIncrementTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <SysTick_Handler+0x40>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f383 8811 	msr	BASEPRI, r3
}
 8002f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	e000ed04 	.word	0xe000ed04

08002f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <vPortSetupTimerInterrupt+0x34>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <vPortSetupTimerInterrupt+0x38>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <vPortSetupTimerInterrupt+0x3c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <vPortSetupTimerInterrupt+0x40>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <vPortSetupTimerInterrupt+0x44>)
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <vPortSetupTimerInterrupt+0x34>)
 8002f90:	2207      	movs	r2, #7
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e010 	.word	0xe000e010
 8002fa4:	e000e018 	.word	0xe000e018
 8002fa8:	24000000 	.word	0x24000000
 8002fac:	10624dd3 	.word	0x10624dd3
 8002fb0:	e000e014 	.word	0xe000e014

08002fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002fc4 <vPortEnableVFP+0x10>
 8002fb8:	6801      	ldr	r1, [r0, #0]
 8002fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002fbe:	6001      	str	r1, [r0, #0]
 8002fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002fc2:	bf00      	nop
 8002fc4:	e000ed88 	.word	0xe000ed88

08002fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002fd4:	f7ff fae6 	bl	80025a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <pvPortMalloc+0x180>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002fe0:	f000 f920 	bl	8003224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <pvPortMalloc+0x184>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8093 	bne.w	8003118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01d      	beq.n	8003034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002ff8:	2208      	movs	r2, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	2b00      	cmp	r3, #0
 8003008:	d014      	beq.n	8003034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	3308      	adds	r3, #8
 8003012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <pvPortMalloc+0x6c>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	617b      	str	r3, [r7, #20]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d06e      	beq.n	8003118 <pvPortMalloc+0x150>
 800303a:	4b45      	ldr	r3, [pc, #276]	; (8003150 <pvPortMalloc+0x188>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d869      	bhi.n	8003118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003044:	4b43      	ldr	r3, [pc, #268]	; (8003154 <pvPortMalloc+0x18c>)
 8003046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <pvPortMalloc+0x18c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800304e:	e004      	b.n	800305a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d903      	bls.n	800306c <pvPortMalloc+0xa4>
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f1      	bne.n	8003050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <pvPortMalloc+0x180>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	429a      	cmp	r2, r3
 8003074:	d050      	beq.n	8003118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2208      	movs	r2, #8
 800307c:	4413      	add	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad2      	subs	r2, r2, r3
 8003090:	2308      	movs	r3, #8
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	429a      	cmp	r2, r3
 8003096:	d91f      	bls.n	80030d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <pvPortMalloc+0xf8>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	613b      	str	r3, [r7, #16]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad2      	subs	r2, r2, r3
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030d2:	69b8      	ldr	r0, [r7, #24]
 80030d4:	f000 f908 	bl	80032e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <pvPortMalloc+0x188>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <pvPortMalloc+0x188>)
 80030e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030e6:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <pvPortMalloc+0x188>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <pvPortMalloc+0x190>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d203      	bcs.n	80030fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <pvPortMalloc+0x188>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <pvPortMalloc+0x190>)
 80030f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <pvPortMalloc+0x184>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	431a      	orrs	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <pvPortMalloc+0x194>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3301      	adds	r3, #1
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <pvPortMalloc+0x194>)
 8003116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003118:	f7ff fa52 	bl	80025c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <pvPortMalloc+0x174>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	60fb      	str	r3, [r7, #12]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <pvPortMalloc+0x172>
	return pvReturn;
 800313c:	69fb      	ldr	r3, [r7, #28]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3728      	adds	r7, #40	; 0x28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	24004084 	.word	0x24004084
 800314c:	24004098 	.word	0x24004098
 8003150:	24004088 	.word	0x24004088
 8003154:	2400407c 	.word	0x2400407c
 8003158:	2400408c 	.word	0x2400408c
 800315c:	24004090 	.word	0x24004090

08003160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04d      	beq.n	800320e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003172:	2308      	movs	r3, #8
 8003174:	425b      	negs	r3, r3
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <vPortFree+0xb8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <vPortFree+0x44>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60fb      	str	r3, [r7, #12]
}
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <vPortFree+0x62>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	60bb      	str	r3, [r7, #8]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <vPortFree+0xb8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01e      	beq.n	800320e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11a      	bne.n	800320e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <vPortFree+0xb8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80031e8:	f7ff f9dc 	bl	80025a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <vPortFree+0xbc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <vPortFree+0xbc>)
 80031f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031fa:	6938      	ldr	r0, [r7, #16]
 80031fc:	f000 f874 	bl	80032e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <vPortFree+0xc0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	4a06      	ldr	r2, [pc, #24]	; (8003220 <vPortFree+0xc0>)
 8003208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800320a:	f7ff f9d9 	bl	80025c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	24004098 	.word	0x24004098
 800321c:	24004088 	.word	0x24004088
 8003220:	24004094 	.word	0x24004094

08003224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800322a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800322e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <prvHeapInit+0xac>)
 8003232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00c      	beq.n	8003258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3307      	adds	r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <prvHeapInit+0xac>)
 8003254:	4413      	add	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <prvHeapInit+0xb0>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <prvHeapInit+0xb0>)
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003270:	2208      	movs	r2, #8
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <prvHeapInit+0xb4>)
 8003284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <prvHeapInit+0xb4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <prvHeapInit+0xb4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	1ad2      	subs	r2, r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <prvHeapInit+0xb4>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <prvHeapInit+0xb8>)
 80032b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <prvHeapInit+0xbc>)
 80032ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <prvHeapInit+0xc0>)
 80032be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	2400047c 	.word	0x2400047c
 80032d4:	2400407c 	.word	0x2400407c
 80032d8:	24004084 	.word	0x24004084
 80032dc:	2400408c 	.word	0x2400408c
 80032e0:	24004088 	.word	0x24004088
 80032e4:	24004098 	.word	0x24004098

080032e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <prvInsertBlockIntoFreeList+0xac>)
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e002      	b.n	80032fc <prvInsertBlockIntoFreeList+0x14>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d8f7      	bhi.n	80032f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	4413      	add	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	429a      	cmp	r2, r3
 8003316:	d108      	bne.n	800332a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	441a      	add	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	441a      	add	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d118      	bne.n	8003370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <prvInsertBlockIntoFreeList+0xb0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d00d      	beq.n	8003366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e008      	b.n	8003378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <prvInsertBlockIntoFreeList+0xb0>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e003      	b.n	8003378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d002      	beq.n	8003386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2400407c 	.word	0x2400407c
 8003398:	24004084 	.word	0x24004084

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	4d0d      	ldr	r5, [pc, #52]	; (80033d4 <__libc_init_array+0x38>)
 80033a0:	4c0d      	ldr	r4, [pc, #52]	; (80033d8 <__libc_init_array+0x3c>)
 80033a2:	1b64      	subs	r4, r4, r5
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	2600      	movs	r6, #0
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	4d0b      	ldr	r5, [pc, #44]	; (80033dc <__libc_init_array+0x40>)
 80033ae:	4c0c      	ldr	r4, [pc, #48]	; (80033e0 <__libc_init_array+0x44>)
 80033b0:	f000 f8e8 	bl	8003584 <_init>
 80033b4:	1b64      	subs	r4, r4, r5
 80033b6:	10a4      	asrs	r4, r4, #2
 80033b8:	2600      	movs	r6, #0
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	0800363c 	.word	0x0800363c
 80033d8:	0800363c 	.word	0x0800363c
 80033dc:	0800363c 	.word	0x0800363c
 80033e0:	08003640 	.word	0x08003640

080033e4 <__retarget_lock_acquire_recursive>:
 80033e4:	4770      	bx	lr

080033e6 <__retarget_lock_release_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <memset>:
 80033e8:	4402      	add	r2, r0
 80033ea:	4603      	mov	r3, r0
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d100      	bne.n	80033f2 <memset+0xa>
 80033f0:	4770      	bx	lr
 80033f2:	f803 1b01 	strb.w	r1, [r3], #1
 80033f6:	e7f9      	b.n	80033ec <memset+0x4>

080033f8 <cleanup_glue>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	460c      	mov	r4, r1
 80033fc:	6809      	ldr	r1, [r1, #0]
 80033fe:	4605      	mov	r5, r0
 8003400:	b109      	cbz	r1, 8003406 <cleanup_glue+0xe>
 8003402:	f7ff fff9 	bl	80033f8 <cleanup_glue>
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800340e:	f000 b869 	b.w	80034e4 <_free_r>
	...

08003414 <_reclaim_reent>:
 8003414:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <_reclaim_reent+0xb4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4283      	cmp	r3, r0
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	d051      	beq.n	80034c4 <_reclaim_reent+0xb0>
 8003420:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003422:	b143      	cbz	r3, 8003436 <_reclaim_reent+0x22>
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d14a      	bne.n	80034c0 <_reclaim_reent+0xac>
 800342a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	b111      	cbz	r1, 8003436 <_reclaim_reent+0x22>
 8003430:	4620      	mov	r0, r4
 8003432:	f000 f857 	bl	80034e4 <_free_r>
 8003436:	6961      	ldr	r1, [r4, #20]
 8003438:	b111      	cbz	r1, 8003440 <_reclaim_reent+0x2c>
 800343a:	4620      	mov	r0, r4
 800343c:	f000 f852 	bl	80034e4 <_free_r>
 8003440:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003442:	b111      	cbz	r1, 800344a <_reclaim_reent+0x36>
 8003444:	4620      	mov	r0, r4
 8003446:	f000 f84d 	bl	80034e4 <_free_r>
 800344a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800344c:	b111      	cbz	r1, 8003454 <_reclaim_reent+0x40>
 800344e:	4620      	mov	r0, r4
 8003450:	f000 f848 	bl	80034e4 <_free_r>
 8003454:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003456:	b111      	cbz	r1, 800345e <_reclaim_reent+0x4a>
 8003458:	4620      	mov	r0, r4
 800345a:	f000 f843 	bl	80034e4 <_free_r>
 800345e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003460:	b111      	cbz	r1, 8003468 <_reclaim_reent+0x54>
 8003462:	4620      	mov	r0, r4
 8003464:	f000 f83e 	bl	80034e4 <_free_r>
 8003468:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800346a:	b111      	cbz	r1, 8003472 <_reclaim_reent+0x5e>
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f839 	bl	80034e4 <_free_r>
 8003472:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003474:	b111      	cbz	r1, 800347c <_reclaim_reent+0x68>
 8003476:	4620      	mov	r0, r4
 8003478:	f000 f834 	bl	80034e4 <_free_r>
 800347c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800347e:	b111      	cbz	r1, 8003486 <_reclaim_reent+0x72>
 8003480:	4620      	mov	r0, r4
 8003482:	f000 f82f 	bl	80034e4 <_free_r>
 8003486:	69a3      	ldr	r3, [r4, #24]
 8003488:	b1e3      	cbz	r3, 80034c4 <_reclaim_reent+0xb0>
 800348a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800348c:	4620      	mov	r0, r4
 800348e:	4798      	blx	r3
 8003490:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003492:	b1b9      	cbz	r1, 80034c4 <_reclaim_reent+0xb0>
 8003494:	4620      	mov	r0, r4
 8003496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800349a:	f7ff bfad 	b.w	80033f8 <cleanup_glue>
 800349e:	5949      	ldr	r1, [r1, r5]
 80034a0:	b941      	cbnz	r1, 80034b4 <_reclaim_reent+0xa0>
 80034a2:	3504      	adds	r5, #4
 80034a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034a6:	2d80      	cmp	r5, #128	; 0x80
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	d1f8      	bne.n	800349e <_reclaim_reent+0x8a>
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 f819 	bl	80034e4 <_free_r>
 80034b2:	e7ba      	b.n	800342a <_reclaim_reent+0x16>
 80034b4:	680e      	ldr	r6, [r1, #0]
 80034b6:	4620      	mov	r0, r4
 80034b8:	f000 f814 	bl	80034e4 <_free_r>
 80034bc:	4631      	mov	r1, r6
 80034be:	e7ef      	b.n	80034a0 <_reclaim_reent+0x8c>
 80034c0:	2500      	movs	r5, #0
 80034c2:	e7ef      	b.n	80034a4 <_reclaim_reent+0x90>
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
 80034c6:	bf00      	nop
 80034c8:	24000014 	.word	0x24000014

080034cc <__malloc_lock>:
 80034cc:	4801      	ldr	r0, [pc, #4]	; (80034d4 <__malloc_lock+0x8>)
 80034ce:	f7ff bf89 	b.w	80033e4 <__retarget_lock_acquire_recursive>
 80034d2:	bf00      	nop
 80034d4:	240040f8 	.word	0x240040f8

080034d8 <__malloc_unlock>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__malloc_unlock+0x8>)
 80034da:	f7ff bf84 	b.w	80033e6 <__retarget_lock_release_recursive>
 80034de:	bf00      	nop
 80034e0:	240040f8 	.word	0x240040f8

080034e4 <_free_r>:
 80034e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d048      	beq.n	800357c <_free_r+0x98>
 80034ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ee:	9001      	str	r0, [sp, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f1a1 0404 	sub.w	r4, r1, #4
 80034f6:	bfb8      	it	lt
 80034f8:	18e4      	addlt	r4, r4, r3
 80034fa:	f7ff ffe7 	bl	80034cc <__malloc_lock>
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <_free_r+0x9c>)
 8003500:	9801      	ldr	r0, [sp, #4]
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	4615      	mov	r5, r2
 8003506:	b933      	cbnz	r3, 8003516 <_free_r+0x32>
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	6014      	str	r4, [r2, #0]
 800350c:	b003      	add	sp, #12
 800350e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003512:	f7ff bfe1 	b.w	80034d8 <__malloc_unlock>
 8003516:	42a3      	cmp	r3, r4
 8003518:	d90b      	bls.n	8003532 <_free_r+0x4e>
 800351a:	6821      	ldr	r1, [r4, #0]
 800351c:	1862      	adds	r2, r4, r1
 800351e:	4293      	cmp	r3, r2
 8003520:	bf04      	itt	eq
 8003522:	681a      	ldreq	r2, [r3, #0]
 8003524:	685b      	ldreq	r3, [r3, #4]
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	bf04      	itt	eq
 800352a:	1852      	addeq	r2, r2, r1
 800352c:	6022      	streq	r2, [r4, #0]
 800352e:	602c      	str	r4, [r5, #0]
 8003530:	e7ec      	b.n	800350c <_free_r+0x28>
 8003532:	461a      	mov	r2, r3
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b10b      	cbz	r3, 800353c <_free_r+0x58>
 8003538:	42a3      	cmp	r3, r4
 800353a:	d9fa      	bls.n	8003532 <_free_r+0x4e>
 800353c:	6811      	ldr	r1, [r2, #0]
 800353e:	1855      	adds	r5, r2, r1
 8003540:	42a5      	cmp	r5, r4
 8003542:	d10b      	bne.n	800355c <_free_r+0x78>
 8003544:	6824      	ldr	r4, [r4, #0]
 8003546:	4421      	add	r1, r4
 8003548:	1854      	adds	r4, r2, r1
 800354a:	42a3      	cmp	r3, r4
 800354c:	6011      	str	r1, [r2, #0]
 800354e:	d1dd      	bne.n	800350c <_free_r+0x28>
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	6053      	str	r3, [r2, #4]
 8003556:	4421      	add	r1, r4
 8003558:	6011      	str	r1, [r2, #0]
 800355a:	e7d7      	b.n	800350c <_free_r+0x28>
 800355c:	d902      	bls.n	8003564 <_free_r+0x80>
 800355e:	230c      	movs	r3, #12
 8003560:	6003      	str	r3, [r0, #0]
 8003562:	e7d3      	b.n	800350c <_free_r+0x28>
 8003564:	6825      	ldr	r5, [r4, #0]
 8003566:	1961      	adds	r1, r4, r5
 8003568:	428b      	cmp	r3, r1
 800356a:	bf04      	itt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	6063      	str	r3, [r4, #4]
 8003572:	bf04      	itt	eq
 8003574:	1949      	addeq	r1, r1, r5
 8003576:	6021      	streq	r1, [r4, #0]
 8003578:	6054      	str	r4, [r2, #4]
 800357a:	e7c7      	b.n	800350c <_free_r+0x28>
 800357c:	b003      	add	sp, #12
 800357e:	bd30      	pop	{r4, r5, pc}
 8003580:	2400409c 	.word	0x2400409c

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
