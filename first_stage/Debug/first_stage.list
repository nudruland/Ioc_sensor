
first_stage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e6c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  080051e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004134  24000078  0800525c  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240041ac  0800525c  000241ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020572  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000039fc  00000000  00000000  00040618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001120  00000000  00000000  00044018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000fc8  00000000  00000000  00045138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033927  00000000  00000000  00046100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013e2d  00000000  00000000  00079a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014bc67  00000000  00000000  0008d854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d94bb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000048bc  00000000  00000000  001d9510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08005124 	.word	0x08005124

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08005124 	.word	0x08005124

08000310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <vApplicationGetIdleTaskMemory+0x2c>)
 8000320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <vApplicationGetIdleTaskMemory+0x30>)
 8000326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	24000094 	.word	0x24000094
 8000340:	24000148 	.word	0x24000148

08000344 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000344:	b5b0      	push	{r4, r5, r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_FREERTOS_Init+0x30>)
 800034c:	1d3c      	adds	r4, r7, #4
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f003 fb90 	bl	8003a86 <osThreadCreate>
 8000366:	4603      	mov	r3, r0
 8000368:	4a03      	ldr	r2, [pc, #12]	; (8000378 <MX_FREERTOS_Init+0x34>)
 800036a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800036c:	bf00      	nop
 800036e:	3720      	adds	r7, #32
 8000370:	46bd      	mov	sp, r7
 8000372:	bdb0      	pop	{r4, r5, r7, pc}
 8000374:	08005148 	.word	0x08005148
 8000378:	240040b4 	.word	0x240040b4

0800037c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f003 fbca 	bl	8003b1e <osDelay>
 800038a:	e7fb      	b.n	8000384 <StartDefaultTask+0x8>

0800038c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_GPIO_Init+0x50>)
 8000394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000398:	4a10      	ldr	r2, [pc, #64]	; (80003dc <MX_GPIO_Init+0x50>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_GPIO_Init+0x50>)
 80003a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_GPIO_Init+0x50>)
 80003b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003b6:	4a09      	ldr	r2, [pc, #36]	; (80003dc <MX_GPIO_Init+0x50>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_GPIO_Init+0x50>)
 80003c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]

}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	58024400 	.word	0x58024400

080003e0 <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?
uint32_t Distance  = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7f1b      	ldrb	r3, [r3, #28]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d170      	bne.n	80004d2 <HAL_TIM_IC_CaptureCallback+0xf2>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80003f0:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <HAL_TIM_IC_CaptureCallback+0x108>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d11a      	bne.n	800042e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80003f8:	2100      	movs	r1, #0
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f002 fd30 	bl	8002e60 <HAL_TIM_ReadCapturedValue>
 8000400:	4603      	mov	r3, r0
 8000402:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000404:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000406:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6a1a      	ldr	r2, [r3, #32]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f022 020a 	bic.w	r2, r2, #10
 800041a:	621a      	str	r2, [r3, #32]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	6a1a      	ldr	r2, [r3, #32]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f042 0202 	orr.w	r2, r2, #2
 800042a:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			//__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800042c:	e051      	b.n	80004d2 <HAL_TIM_IC_CaptureCallback+0xf2>
		else if (Is_First_Captured==1)   // if the first is already captured
 800042e:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d14d      	bne.n	80004d2 <HAL_TIM_IC_CaptureCallback+0xf2>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000436:	2100      	movs	r1, #0
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f002 fd11 	bl	8002e60 <HAL_TIM_ReadCapturedValue>
 800043e:	4603      	mov	r3, r0
 8000440:	4a2b      	ldr	r2, [pc, #172]	; (80004f0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000442:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800044c:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <HAL_TIM_IC_CaptureCallback+0x110>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d907      	bls.n	8000468 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000458:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <HAL_TIM_IC_CaptureCallback+0x110>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <HAL_TIM_IC_CaptureCallback+0x10c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	4a24      	ldr	r2, [pc, #144]	; (80004f4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	e00f      	b.n	8000488 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000468:	4b20      	ldr	r3, [pc, #128]	; (80004ec <HAL_TIM_IC_CaptureCallback+0x10c>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <HAL_TIM_IC_CaptureCallback+0x110>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	429a      	cmp	r2, r3
 8000472:	d909      	bls.n	8000488 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <HAL_TIM_IC_CaptureCallback+0x10c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	1ad2      	subs	r2, r2, r3
 800047e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000482:	4413      	add	r3, r2
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000486:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000488:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	ee07 3a90 	vmov	s15, r3
 8000490:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000494:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80004e0 <HAL_TIM_IC_CaptureCallback+0x100>
 8000498:	ee27 6b06 	vmul.f64	d6, d7, d6
 800049c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80004a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80004a8:	ee17 2a90 	vmov	r2, s15
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80004ae:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <HAL_TIM_IC_CaptureCallback+0x108>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6a1a      	ldr	r2, [r3, #32]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f022 020a 	bic.w	r2, r2, #10
 80004c4:	621a      	str	r2, [r3, #32]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6a12      	ldr	r2, [r2, #32]
 80004d0:	621a      	str	r2, [r3, #32]
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	f3af 8000 	nop.w
 80004e0:	b020c49c 	.word	0xb020c49c
 80004e4:	3fa16872 	.word	0x3fa16872
 80004e8:	24000354 	.word	0x24000354
 80004ec:	24000348 	.word	0x24000348
 80004f0:	2400034c 	.word	0x2400034c
 80004f4:	24000350 	.word	0x24000350
 80004f8:	24000358 	.word	0x24000358

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb4a 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f818 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f7ff ff40 	bl	800038c <MX_GPIO_Init>
  MX_TIM3_Init();
 800050c:	f000 fa12 	bl	8000934 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000510:	f000 f9bc 	bl	800088c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000514:	2104      	movs	r1, #4
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <main+0x34>)
 8000518:	f001 ff00 	bl	800231c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x38>)
 8000520:	f002 f870 	bl	8002604 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000524:	f7ff ff0e 	bl	8000344 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000528:	f003 faa6 	bl	8003a78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x30>
 800052e:	bf00      	nop
 8000530:	24004104 	.word	0x24004104
 8000534:	24004150 	.word	0x24004150

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	; 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	224c      	movs	r2, #76	; 0x4c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fd1e 	bl	8004f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fd18 	bl	8004f88 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000558:	2002      	movs	r0, #2
 800055a:	f000 fe01 	bl	8001160 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <SystemClock_Config+0xdc>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <SystemClock_Config+0xdc>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <SystemClock_Config+0xdc>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800057a:	bf00      	nop
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xdc>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000588:	d1f8      	bne.n	800057c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800058e:	2301      	movs	r3, #1
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	2300      	movs	r3, #0
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059e:	2304      	movs	r3, #4
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80005a2:	2322      	movs	r3, #34	; 0x22
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005b2:	230c      	movs	r3, #12
 80005b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80005ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fe05 	bl	80011d4 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d0:	f000 f834 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	233f      	movs	r3, #63	; 0x3f
 80005d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005e0:	2308      	movs	r3, #8
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005e4:	2340      	movs	r3, #64	; 0x40
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f2:	2340      	movs	r3, #64	; 0x40
 80005f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2103      	movs	r1, #3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f996 	bl	800192c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000606:	f000 f819 	bl	800063c <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3770      	adds	r7, #112	; 0x70
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	58024800 	.word	0x58024800

08000618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062a:	f000 faf1 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010000 	.word	0x40010000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x38>)
 8000650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000654:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <HAL_MspInit+0x38>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_MspInit+0x38>)
 8000660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000664:	f003 0302 	and.w	r3, r3, #2
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	210f      	movs	r1, #15
 8000670:	f06f 0001 	mvn.w	r0, #1
 8000674:	f000 fba4 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58024400 	.word	0x58024400

08000684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08e      	sub	sp, #56	; 0x38
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d844      	bhi.n	800071c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000692:	2200      	movs	r2, #0
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	2019      	movs	r0, #25
 8000698:	f000 fb92 	bl	8000dc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800069c:	2019      	movs	r0, #25
 800069e:	f000 fba9 	bl	8000df4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80006a2:	4a24      	ldr	r2, [pc, #144]	; (8000734 <HAL_InitTick+0xb0>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <HAL_InitTick+0xb4>)
 80006aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <HAL_InitTick+0xb4>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <HAL_InitTick+0xb4>)
 80006ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fca1 	bl	8002018 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80006d6:	f001 fc89 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80006da:	4603      	mov	r3, r0
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <HAL_InitTick+0xb8>)
 80006e4:	fba2 2303 	umull	r2, r3, r2, r3
 80006e8:	0c9b      	lsrs	r3, r3, #18
 80006ea:	3b01      	subs	r3, #1
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_InitTick+0xbc>)
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_InitTick+0xc0>)
 80006f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0xbc>)
 80006f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <HAL_InitTick+0xbc>)
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_InitTick+0xbc>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_InitTick+0xbc>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <HAL_InitTick+0xbc>)
 8000710:	f001 fcc4 	bl	800209c <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d107      	bne.n	800072a <HAL_InitTick+0xa6>
 800071a:	e001      	b.n	8000720 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	e005      	b.n	800072c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <HAL_InitTick+0xbc>)
 8000722:	f001 fd1d 	bl	8002160 <HAL_TIM_Base_Start_IT>
 8000726:	4603      	mov	r3, r0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3738      	adds	r7, #56	; 0x38
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000008 	.word	0x24000008
 8000738:	58024400 	.word	0x58024400
 800073c:	431bde83 	.word	0x431bde83
 8000740:	240040b8 	.word	0x240040b8
 8000744:	40010000 	.word	0x40010000

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <TIM1_UP_IRQHandler+0x10>)
 800077a:	f002 f8a1 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	240040b8 	.word	0x240040b8

08000788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <TIM2_IRQHandler+0x10>)
 800078e:	f002 f897 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24004150 	.word	0x24004150

0800079c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007a0:	4b32      	ldr	r3, [pc, #200]	; (800086c <SystemInit+0xd0>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a31      	ldr	r2, [pc, #196]	; (800086c <SystemInit+0xd0>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007b0:	4b2f      	ldr	r3, [pc, #188]	; (8000870 <SystemInit+0xd4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 030f 	and.w	r3, r3, #15
 80007b8:	2b06      	cmp	r3, #6
 80007ba:	d807      	bhi.n	80007cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007bc:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <SystemInit+0xd4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f023 030f 	bic.w	r3, r3, #15
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <SystemInit+0xd4>)
 80007c6:	f043 0307 	orr.w	r3, r3, #7
 80007ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007cc:	4b29      	ldr	r3, [pc, #164]	; (8000874 <SystemInit+0xd8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a28      	ldr	r2, [pc, #160]	; (8000874 <SystemInit+0xd8>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <SystemInit+0xd8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007de:	4b25      	ldr	r3, [pc, #148]	; (8000874 <SystemInit+0xd8>)
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	4924      	ldr	r1, [pc, #144]	; (8000874 <SystemInit+0xd8>)
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <SystemInit+0xdc>)
 80007e6:	4013      	ands	r3, r2
 80007e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <SystemInit+0xd4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d007      	beq.n	8000806 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <SystemInit+0xd4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f023 030f 	bic.w	r3, r3, #15
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <SystemInit+0xd4>)
 8000800:	f043 0307 	orr.w	r3, r3, #7
 8000804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <SystemInit+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <SystemInit+0xd8>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <SystemInit+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <SystemInit+0xd8>)
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <SystemInit+0xe0>)
 800081c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <SystemInit+0xd8>)
 8000820:	4a17      	ldr	r2, [pc, #92]	; (8000880 <SystemInit+0xe4>)
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <SystemInit+0xd8>)
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <SystemInit+0xe8>)
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <SystemInit+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0xd8>)
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <SystemInit+0xe8>)
 8000834:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <SystemInit+0xd8>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <SystemInit+0xd8>)
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <SystemInit+0xe8>)
 8000840:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <SystemInit+0xd8>)
 8000844:	2200      	movs	r2, #0
 8000846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <SystemInit+0xd8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a09      	ldr	r2, [pc, #36]	; (8000874 <SystemInit+0xd8>)
 800084e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000852:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <SystemInit+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <SystemInit+0xec>)
 800085c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000860:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	52002000 	.word	0x52002000
 8000874:	58024400 	.word	0x58024400
 8000878:	eaf6ed7f 	.word	0xeaf6ed7f
 800087c:	02020200 	.word	0x02020200
 8000880:	01ff0000 	.word	0x01ff0000
 8000884:	01010280 	.word	0x01010280
 8000888:	52004000 	.word	0x52004000

0800088c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 137 - 1;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008b4:	2288      	movs	r2, #136	; 0x88
 80008b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008d4:	f001 fe3e 	bl	8002554 <HAL_TIM_IC_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008de:	f7ff fead 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480f      	ldr	r0, [pc, #60]	; (8000930 <MX_TIM2_Init+0xa4>)
 80008f2:	f002 ffef 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008fc:	f7ff fe9e 	bl	800063c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000904:	2301      	movs	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM2_Init+0xa4>)
 8000918:	f002 f8f1 	bl	8002afe <HAL_TIM_IC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000922:	f7ff fe8b 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	24004150 	.word	0x24004150

08000934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_TIM3_Init+0xb0>)
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_TIM3_Init+0xb4>)
 800095c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 550 - 1;
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_TIM3_Init+0xb0>)
 8000960:	f240 2225 	movw	r2, #549	; 0x225
 8000964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_TIM3_Init+0xb0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM3_Init+0xb0>)
 800096e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM3_Init+0xb0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_TIM3_Init+0xb0>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_TIM3_Init+0xb0>)
 8000982:	f001 fc73 	bl	800226c <HAL_TIM_PWM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800098c:	f7ff fe56 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_TIM3_Init+0xb0>)
 80009a0:	f002 ff98 	bl	80038d4 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80009aa:	f7ff fe47 	bl	800063c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 80009b2:	2305      	movs	r3, #5
 80009b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM3_Init+0xb0>)
 80009c6:	f002 f937 	bl	8002c38 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009d0:	f7ff fe34 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM3_Init+0xb0>)
 80009d6:	f000 f87b 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24004104 	.word	0x24004104
 80009e8:	40000400 	.word	0x40000400

080009ec <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d135      	bne.n	8000a7a <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a14:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_TIM_IC_MspInit+0x98>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4808      	ldr	r0, [pc, #32]	; (8000a88 <HAL_TIM_IC_MspInit+0x9c>)
 8000a66:	f000 f9d3 	bl	8000e10 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2105      	movs	r1, #5
 8000a6e:	201c      	movs	r0, #28
 8000a70:	f000 f9a6 	bl	8000dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a74:	201c      	movs	r0, #28
 8000a76:	f000 f9bd 	bl	8000df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020000 	.word	0x58020000

08000a8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d10e      	bne.n	8000abc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_TIM_PWM_MspInit+0x40>)
 8000aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa4:	4a09      	ldr	r2, [pc, #36]	; (8000acc <HAL_TIM_PWM_MspInit+0x40>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_TIM_PWM_MspInit+0x40>)
 8000ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	58024400 	.word	0x58024400

08000ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <HAL_TIM_MspPostInit+0x68>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d11e      	bne.n	8000b30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_TIM_MspPostInit+0x70>)
 8000b2c:	f000 f970 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40000400 	.word	0x40000400
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	58020800 	.word	0x58020800

08000b44 <Reset_Handler>:
 8000b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b7c <LoopFillZerobss+0xe>
 8000b48:	f7ff fe28 	bl	800079c <SystemInit>
 8000b4c:	480c      	ldr	r0, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <LoopFillZerobss+0x1a>)
 8000b52:	2300      	movs	r3, #0
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:
 8000b56:	58d4      	ldr	r4, [r2, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:
 8000b5c:	18c4      	adds	r4, r0, r3
 8000b5e:	428c      	cmp	r4, r1
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <LoopFillZerobss+0x1e>)
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <LoopFillZerobss+0x22>)
 8000b66:	2300      	movs	r3, #0
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:
 8000b6e:	42a2      	cmp	r2, r4
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>
 8000b72:	f004 f9e3 	bl	8004f3c <__libc_init_array>
 8000b76:	f7ff fcc1 	bl	80004fc <main>
 8000b7a:	4770      	bx	lr
 8000b7c:	24050000 	.word	0x24050000
 8000b80:	24000000 	.word	0x24000000
 8000b84:	24000078 	.word	0x24000078
 8000b88:	080051e4 	.word	0x080051e4
 8000b8c:	24000078 	.word	0x24000078
 8000b90:	240041ac 	.word	0x240041ac

08000b94 <ADC3_IRQHandler>:
 8000b94:	e7fe      	b.n	8000b94 <ADC3_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f000 f903 	bl	8000daa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ba4:	f001 f878 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_Init+0x68>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	0a1b      	lsrs	r3, r3, #8
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	4913      	ldr	r1, [pc, #76]	; (8000c04 <HAL_Init+0x6c>)
 8000bb6:	5ccb      	ldrb	r3, [r1, r3]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_Init+0x68>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_Init+0x6c>)
 8000bcc:	5cd3      	ldrb	r3, [r2, r3]
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_Init+0x70>)
 8000bda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_Init+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff fd4e 	bl	8000684 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e002      	b.n	8000bf8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf2:	f7ff fd29 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400
 8000c04:	0800516c 	.word	0x0800516c
 8000c08:	24000004 	.word	0x24000004
 8000c0c:	24000000 	.word	0x24000000

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400000c 	.word	0x2400000c
 8000c34:	2400419c 	.word	0x2400419c

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2400419c 	.word	0x2400419c

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff4c 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dce:	f7ff ff63 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f7ff ffb3 	bl	8000d44 <NVIC_EncodePriority>
 8000dde:	4602      	mov	r2, r0
 8000de0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff82 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff56 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e1e:	4b86      	ldr	r3, [pc, #536]	; (8001038 <HAL_GPIO_Init+0x228>)
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e22:	e18c      	b.n	800113e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 817e 	beq.w	8001138 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x44>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	69b9      	ldr	r1, [r7, #24]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80d8 	beq.w	8001138 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_GPIO_Init+0x22c>)
 8000f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_GPIO_Init+0x22c>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <HAL_GPIO_Init+0x22c>)
 8000f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa6:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_GPIO_Init+0x230>)
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x234>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d04a      	beq.n	8001068 <HAL_GPIO_Init+0x258>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <HAL_GPIO_Init+0x238>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d02b      	beq.n	8001032 <HAL_GPIO_Init+0x222>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_GPIO_Init+0x23c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d025      	beq.n	800102e <HAL_GPIO_Init+0x21e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_GPIO_Init+0x240>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d01f      	beq.n	800102a <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_GPIO_Init+0x244>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d019      	beq.n	8001026 <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_GPIO_Init+0x248>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_GPIO_Init+0x24c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00d      	beq.n	800101e <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_GPIO_Init+0x250>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d007      	beq.n	800101a <HAL_GPIO_Init+0x20a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <HAL_GPIO_Init+0x254>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_GPIO_Init+0x206>
 8001012:	2309      	movs	r3, #9
 8001014:	e029      	b.n	800106a <HAL_GPIO_Init+0x25a>
 8001016:	230a      	movs	r3, #10
 8001018:	e027      	b.n	800106a <HAL_GPIO_Init+0x25a>
 800101a:	2307      	movs	r3, #7
 800101c:	e025      	b.n	800106a <HAL_GPIO_Init+0x25a>
 800101e:	2306      	movs	r3, #6
 8001020:	e023      	b.n	800106a <HAL_GPIO_Init+0x25a>
 8001022:	2305      	movs	r3, #5
 8001024:	e021      	b.n	800106a <HAL_GPIO_Init+0x25a>
 8001026:	2304      	movs	r3, #4
 8001028:	e01f      	b.n	800106a <HAL_GPIO_Init+0x25a>
 800102a:	2303      	movs	r3, #3
 800102c:	e01d      	b.n	800106a <HAL_GPIO_Init+0x25a>
 800102e:	2302      	movs	r3, #2
 8001030:	e01b      	b.n	800106a <HAL_GPIO_Init+0x25a>
 8001032:	2301      	movs	r3, #1
 8001034:	e019      	b.n	800106a <HAL_GPIO_Init+0x25a>
 8001036:	bf00      	nop
 8001038:	58000080 	.word	0x58000080
 800103c:	58024400 	.word	0x58024400
 8001040:	58000400 	.word	0x58000400
 8001044:	58020000 	.word	0x58020000
 8001048:	58020400 	.word	0x58020400
 800104c:	58020800 	.word	0x58020800
 8001050:	58020c00 	.word	0x58020c00
 8001054:	58021000 	.word	0x58021000
 8001058:	58021400 	.word	0x58021400
 800105c:	58021800 	.word	0x58021800
 8001060:	58021c00 	.word	0x58021c00
 8001064:	58022400 	.word	0x58022400
 8001068:	2300      	movs	r3, #0
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	f002 0203 	and.w	r2, r2, #3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4093      	lsls	r3, r2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800107a:	4938      	ldr	r1, [pc, #224]	; (800115c <HAL_GPIO_Init+0x34c>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80010ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f ae6b 	bne.w	8000e24 <HAL_GPIO_Init+0x14>
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	3724      	adds	r7, #36	; 0x24
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	58000400 	.word	0x58000400

08001160 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00a      	beq.n	800118a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d001      	beq.n	8001186 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e01f      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e01d      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	490f      	ldr	r1, [pc, #60]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800119a:	f7ff fd4d 	bl	8000c38 <HAL_GetTick>
 800119e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011a0:	e009      	b.n	80011b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011a2:	f7ff fd49 	bl	8000c38 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b0:	d901      	bls.n	80011b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e007      	b.n	80011c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_PWREx_ConfigSupply+0x70>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011c2:	d1ee      	bne.n	80011a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	58024800 	.word	0x58024800

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e397      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8087 	beq.w	8001302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011f4:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011fe:	4b9c      	ldr	r3, [pc, #624]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	2b10      	cmp	r3, #16
 8001208:	d007      	beq.n	800121a <HAL_RCC_OscConfig+0x46>
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	2b18      	cmp	r3, #24
 800120e:	d110      	bne.n	8001232 <HAL_RCC_OscConfig+0x5e>
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d10b      	bne.n	8001232 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d06c      	beq.n	8001300 <HAL_RCC_OscConfig+0x12c>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d168      	bne.n	8001300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e371      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x76>
 800123c:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a8b      	ldr	r2, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e02e      	b.n	80012a8 <HAL_RCC_OscConfig+0xd4>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x98>
 8001252:	4b87      	ldr	r3, [pc, #540]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a86      	ldr	r2, [pc, #536]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b84      	ldr	r3, [pc, #528]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a83      	ldr	r2, [pc, #524]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e01d      	b.n	80012a8 <HAL_RCC_OscConfig+0xd4>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0xbc>
 8001276:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7d      	ldr	r2, [pc, #500]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0xd4>
 8001290:	4b77      	ldr	r3, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a76      	ldr	r2, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b74      	ldr	r3, [pc, #464]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a73      	ldr	r2, [pc, #460]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcc2 	bl	8000c38 <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fcbe 	bl	8000c38 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e325      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ca:	4b69      	ldr	r3, [pc, #420]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe4>
 80012d6:	e014      	b.n	8001302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcae 	bl	8000c38 <HAL_GetTick>
 80012dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcaa 	bl	8000c38 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	; 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e311      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x10c>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 808a 	beq.w	8001424 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001310:	4b57      	ldr	r3, [pc, #348]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001318:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800131a:	4b55      	ldr	r3, [pc, #340]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_RCC_OscConfig+0x162>
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	2b18      	cmp	r3, #24
 800132a:	d137      	bne.n	800139c <HAL_RCC_OscConfig+0x1c8>
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d132      	bne.n	800139c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001336:	4b4e      	ldr	r3, [pc, #312]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x17a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e2e3      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0219 	bic.w	r2, r3, #25
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4945      	ldr	r1, [pc, #276]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001360:	f7ff fc6a 	bl	8000c38 <HAL_GetTick>
 8001364:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fc66 	bl	8000c38 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e2cd      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	061b      	lsls	r3, r3, #24
 8001394:	4936      	ldr	r1, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139a:	e043      	b.n	8001424 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d026      	beq.n	80013f2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 0219 	bic.w	r2, r3, #25
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	492f      	ldr	r1, [pc, #188]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc3f 	bl	8000c38 <HAL_GetTick>
 80013ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc3b 	bl	8000c38 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e2a2      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	061b      	lsls	r3, r3, #24
 80013ea:	4921      	ldr	r1, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	e018      	b.n	8001424 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc1b 	bl	8000c38 <HAL_GetTick>
 8001402:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc17 	bl	8000c38 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e27e      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	2b00      	cmp	r3, #0
 800142e:	d06d      	beq.n	800150c <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001438:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d007      	beq.n	8001456 <HAL_RCC_OscConfig+0x282>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b18      	cmp	r3, #24
 800144a:	d11e      	bne.n	800148a <HAL_RCC_OscConfig+0x2b6>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d119      	bne.n	800148a <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_OscConfig+0x29c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <HAL_RCC_OscConfig+0x2a0>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	2b80      	cmp	r3, #128	; 0x80
 8001468:	d004      	beq.n	8001474 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e253      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
 800146e:	bf00      	nop
 8001470:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001474:	4ba3      	ldr	r3, [pc, #652]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	49a0      	ldr	r1, [pc, #640]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001488:	e040      	b.n	800150c <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d023      	beq.n	80014da <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001492:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a9b      	ldr	r2, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fbcb 	bl	8000c38 <HAL_GetTick>
 80014a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014a6:	f7ff fbc7 	bl	8000c38 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e22e      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014b8:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	061b      	lsls	r3, r3, #24
 80014d2:	498c      	ldr	r1, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60cb      	str	r3, [r1, #12]
 80014d8:	e018      	b.n	800150c <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014da:	4b8a      	ldr	r3, [pc, #552]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a89      	ldr	r2, [pc, #548]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80014e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fba7 	bl	8000c38 <HAL_GetTick>
 80014ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014ee:	f7ff fba3 	bl	8000c38 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e20a      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d036      	beq.n	8001586 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001520:	4b78      	ldr	r3, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	4a77      	ldr	r2, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fb84 	bl	8000c38 <HAL_GetTick>
 8001530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001534:	f7ff fb80 	bl	8000c38 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1e7      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001546:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x360>
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001558:	4a6a      	ldr	r2, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fb6a 	bl	8000c38 <HAL_GetTick>
 8001564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fb66 	bl	8000c38 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1cd      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800157a:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b00      	cmp	r3, #0
 8001590:	d036      	beq.n	8001600 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d019      	beq.n	80015ce <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a59      	ldr	r2, [pc, #356]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80015a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb47 	bl	8000c38 <HAL_GetTick>
 80015aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015ae:	f7ff fb43 	bl	8000c38 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1aa      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x3da>
 80015cc:	e018      	b.n	8001600 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ce:	4b4d      	ldr	r3, [pc, #308]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a4c      	ldr	r2, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80015d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015da:	f7ff fb2d 	bl	8000c38 <HAL_GetTick>
 80015de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015e2:	f7ff fb29 	bl	8000c38 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e190      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8085 	beq.w	8001718 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x534>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x534>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800161a:	f7ff fb0d 	bl	8000c38 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fb09 	bl	8000c38 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e170      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_OscConfig+0x534>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x482>
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x4de>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x4a4>
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a25      	ldr	r2, [pc, #148]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4de>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x4c6>
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x4de>
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fabd 	bl	8000c38 <HAL_GetTick>
 80016be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fab9 	bl	8000c38 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e11e      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x530>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4ee>
 80016e4:	e018      	b.n	8001718 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff faa7 	bl	8000c38 <HAL_GetTick>
 80016ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ec:	e00e      	b.n	800170c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff faa3 	bl	8000c38 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d905      	bls.n	800170c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e108      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
 8001704:	58024400 	.word	0x58024400
 8001708:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ea      	bne.n	80016ee <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80f9 	beq.w	8001914 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800172a:	2b18      	cmp	r3, #24
 800172c:	f000 80b4 	beq.w	8001898 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	2b02      	cmp	r3, #2
 8001736:	f040 8095 	bne.w	8001864 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a78      	ldr	r2, [pc, #480]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa77 	bl	8000c38 <HAL_GetTick>
 800174a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fa73 	bl	8000c38 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0da      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001770:	4b6c      	ldr	r3, [pc, #432]	; (8001924 <HAL_RCC_OscConfig+0x750>)
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	430a      	orrs	r2, r1
 8001780:	4967      	ldr	r1, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	628b      	str	r3, [r1, #40]	; 0x28
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	3b01      	subs	r3, #1
 800178c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	3b01      	subs	r3, #1
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	b29b      	uxth	r3, r3
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a0:	3b01      	subs	r3, #1
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	3b01      	subs	r3, #1
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017b6:	495a      	ldr	r1, [pc, #360]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017c8:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017cc:	4b56      	ldr	r3, [pc, #344]	; (8001928 <HAL_RCC_OscConfig+0x754>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017d4:	00d2      	lsls	r2, r2, #3
 80017d6:	4952      	ldr	r1, [pc, #328]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f023 020c 	bic.w	r2, r3, #12
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017ee:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f2:	f023 0202 	bic.w	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4949      	ldr	r1, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800180c:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	4a43      	ldr	r2, [pc, #268]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	4a40      	ldr	r2, [pc, #256]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800181e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001824:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a3a      	ldr	r2, [pc, #232]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f9fc 	bl	8000c38 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f9f8 	bl	8000c38 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e05f      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x670>
 8001862:	e057      	b.n	8001914 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f9e2 	bl	8000c38 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f9de 	bl	8000c38 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x6a4>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_OscConfig+0x74c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d031      	beq.n	8001910 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d12a      	bne.n	8001910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d122      	bne.n	8001910 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0a5b      	lsrs	r3, r3, #9
 80018de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	0e1b      	lsrs	r3, r3, #24
 8001902:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3730      	adds	r7, #48	; 0x30
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	58024400 	.word	0x58024400
 8001924:	fffffc0c 	.word	0xfffffc0c
 8001928:	ffff0007 	.word	0xffff0007

0800192c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e19c      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b8a      	ldr	r3, [pc, #552]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b87      	ldr	r3, [pc, #540]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	4985      	ldr	r1, [pc, #532]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b83      	ldr	r3, [pc, #524]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e184      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800198c:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	4975      	ldr	r1, [pc, #468]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 800199a:	4313      	orrs	r3, r2
 800199c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d010      	beq.n	80019cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d908      	bls.n	80019cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	496a      	ldr	r1, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d908      	bls.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	495e      	ldr	r1, [pc, #376]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4953      	ldr	r1, [pc, #332]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 030f 	and.w	r3, r3, #15
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d908      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f023 020f 	bic.w	r2, r3, #15
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4947      	ldr	r1, [pc, #284]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d055      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4940      	ldr	r1, [pc, #256]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d121      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0f6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a94:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d115      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0ea      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0de      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f023 0207 	bic.w	r2, r3, #7
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4925      	ldr	r1, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f8ab 	bl	8000c38 <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae6:	f7ff f8a7 	bl	8000c38 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e0be      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d1eb      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d010      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d208      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f023 020f 	bic.w	r2, r3, #15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_RCC_ClockConfig+0x244>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d214      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 020f 	bic.w	r2, r3, #15
 8001b52:	4906      	ldr	r1, [pc, #24]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_ClockConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e086      	b.n	8001c7a <HAL_RCC_ClockConfig+0x34e>
 8001b6c:	52002000 	.word	0x52002000
 8001b70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d208      	bcs.n	8001ba2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b90:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4939      	ldr	r1, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d010      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d208      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bbe:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	492e      	ldr	r1, [pc, #184]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d208      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4922      	ldr	r1, [pc, #136]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d208      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4917      	ldr	r1, [pc, #92]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c2c:	f000 f834 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	4912      	ldr	r1, [pc, #72]	; (8001c88 <HAL_RCC_ClockConfig+0x35c>)
 8001c3e:	5ccb      	ldrb	r3, [r1, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x358>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_RCC_ClockConfig+0x35c>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x360>)
 8001c62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x364>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x368>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd08 	bl	8000684 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	0800516c 	.word	0x0800516c
 8001c8c:	24000004 	.word	0x24000004
 8001c90:	24000000 	.word	0x24000000
 8001c94:	24000008 	.word	0x24000008

08001c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c9e:	4bb3      	ldr	r3, [pc, #716]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca6:	2b18      	cmp	r3, #24
 8001ca8:	f200 8155 	bhi.w	8001f56 <HAL_RCC_GetSysClockFreq+0x2be>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001d19 	.word	0x08001d19
 8001cb8:	08001f57 	.word	0x08001f57
 8001cbc:	08001f57 	.word	0x08001f57
 8001cc0:	08001f57 	.word	0x08001f57
 8001cc4:	08001f57 	.word	0x08001f57
 8001cc8:	08001f57 	.word	0x08001f57
 8001ccc:	08001f57 	.word	0x08001f57
 8001cd0:	08001f57 	.word	0x08001f57
 8001cd4:	08001d3f 	.word	0x08001d3f
 8001cd8:	08001f57 	.word	0x08001f57
 8001cdc:	08001f57 	.word	0x08001f57
 8001ce0:	08001f57 	.word	0x08001f57
 8001ce4:	08001f57 	.word	0x08001f57
 8001ce8:	08001f57 	.word	0x08001f57
 8001cec:	08001f57 	.word	0x08001f57
 8001cf0:	08001f57 	.word	0x08001f57
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001f57 	.word	0x08001f57
 8001cfc:	08001f57 	.word	0x08001f57
 8001d00:	08001f57 	.word	0x08001f57
 8001d04:	08001f57 	.word	0x08001f57
 8001d08:	08001f57 	.word	0x08001f57
 8001d0c:	08001f57 	.word	0x08001f57
 8001d10:	08001f57 	.word	0x08001f57
 8001d14:	08001d4b 	.word	0x08001d4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d18:	4b94      	ldr	r3, [pc, #592]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d009      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d24:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d36:	e111      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d38:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d3a:	61bb      	str	r3, [r7, #24]
    break;
 8001d3c:	e10e      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d40:	61bb      	str	r3, [r7, #24]
    break;
 8001d42:	e10b      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d46:	61bb      	str	r3, [r7, #24]
    break;
 8001d48:	e108      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d60:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d6a:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	fb02 f303 	mul.w	r3, r2, r3
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80e1 	beq.w	8001f50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	f000 8083 	beq.w	8001e9c <HAL_RCC_GetSysClockFreq+0x204>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	f200 80a1 	bhi.w	8001ee0 <HAL_RCC_GetSysClockFreq+0x248>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x114>
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d056      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001daa:	e099      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dac:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d02d      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001db8:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	4a6b      	ldr	r2, [pc, #428]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001de2:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001df6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e12:	e087      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001f80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e26:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e56:	e065      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e9a:	e043      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ede:	e021      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	0a5b      	lsrs	r3, r3, #9
 8001f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2e:	3301      	adds	r3, #1
 8001f30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f48:	ee17 3a90 	vmov	r3, s15
 8001f4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
    break;
 8001f54:	e002      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f58:	61bb      	str	r3, [r7, #24]
    break;
 8001f5a:	bf00      	nop
  }

  return sysclockfreq;
 8001f5c:	69bb      	ldr	r3, [r7, #24]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	03d09000 	.word	0x03d09000
 8001f74:	003d0900 	.word	0x003d0900
 8001f78:	017d7840 	.word	0x017d7840
 8001f7c:	46000000 	.word	0x46000000
 8001f80:	4c742400 	.word	0x4c742400
 8001f84:	4a742400 	.word	0x4a742400
 8001f88:	4bbebc20 	.word	0x4bbebc20

08001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001f92:	f7ff fe81 	bl	8001c98 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490f      	ldr	r1, [pc, #60]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	4a09      	ldr	r2, [pc, #36]	; (8001fe0 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	0800516c 	.word	0x0800516c
 8001fe4:	24000004 	.word	0x24000004
 8001fe8:	24000000 	.word	0x24000000

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001ff0:	f7ff ffcc 	bl	8001f8c <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	58024400 	.word	0x58024400
 8002014:	0800516c 	.word	0x0800516c

08002018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	223f      	movs	r2, #63	; 0x3f
 8002026:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	f003 0207 	and.w	r2, r3, #7
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_GetClockConfig+0x7c>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetClockConfig+0x80>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	601a      	str	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	58024400 	.word	0x58024400
 8002098:	52002000 	.word	0x52002000

0800209c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e049      	b.n	8002142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f841 	bl	800214a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	4610      	mov	r0, r2
 80020dc:	f000 ff22 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d001      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e05e      	b.n	8002236 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2b      	ldr	r2, [pc, #172]	; (8002244 <HAL_TIM_Base_Start_IT+0xe4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02c      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d027      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <HAL_TIM_Base_Start_IT+0xe8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d022      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a26      	ldr	r2, [pc, #152]	; (800224c <HAL_TIM_Base_Start_IT+0xec>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d01d      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_TIM_Base_Start_IT+0xf0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d018      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_TIM_Base_Start_IT+0xf4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_TIM_Base_Start_IT+0xf8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00e      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a20      	ldr	r2, [pc, #128]	; (800225c <HAL_TIM_Base_Start_IT+0xfc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d009      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_TIM_Base_Start_IT+0x100>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x94>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_TIM_Base_Start_IT+0x104>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d115      	bne.n	8002220 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_TIM_Base_Start_IT+0x108>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d015      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0xd2>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d011      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	e008      	b.n	8002232 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e000      	b.n	8002234 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40010400 	.word	0x40010400
 8002258:	40001800 	.word	0x40001800
 800225c:	40014000 	.word	0x40014000
 8002260:	4000e000 	.word	0x4000e000
 8002264:	4000e400 	.word	0x4000e400
 8002268:	00010007 	.word	0x00010007

0800226c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e049      	b.n	8002312 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fbfa 	bl	8000a8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f000 fe3a 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_TIM_PWM_Start+0x24>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e03c      	b.n	80023ba <HAL_TIM_PWM_Start+0x9e>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d109      	bne.n	800235a <HAL_TIM_PWM_Start+0x3e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	e02f      	b.n	80023ba <HAL_TIM_PWM_Start+0x9e>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d109      	bne.n	8002374 <HAL_TIM_PWM_Start+0x58>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	bf14      	ite	ne
 800236c:	2301      	movne	r3, #1
 800236e:	2300      	moveq	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	e022      	b.n	80023ba <HAL_TIM_PWM_Start+0x9e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d109      	bne.n	800238e <HAL_TIM_PWM_Start+0x72>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	e015      	b.n	80023ba <HAL_TIM_PWM_Start+0x9e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b10      	cmp	r3, #16
 8002392:	d109      	bne.n	80023a8 <HAL_TIM_PWM_Start+0x8c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e008      	b.n	80023ba <HAL_TIM_PWM_Start+0x9e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ab      	b.n	800251a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_PWM_Start+0xb6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	e023      	b.n	800241a <HAL_TIM_PWM_Start+0xfe>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_PWM_Start+0xc6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	e01b      	b.n	800241a <HAL_TIM_PWM_Start+0xfe>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d104      	bne.n	80023f2 <HAL_TIM_PWM_Start+0xd6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f0:	e013      	b.n	800241a <HAL_TIM_PWM_Start+0xfe>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_PWM_Start+0xe6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002400:	e00b      	b.n	800241a <HAL_TIM_PWM_Start+0xfe>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b10      	cmp	r3, #16
 8002406:	d104      	bne.n	8002412 <HAL_TIM_PWM_Start+0xf6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	e003      	b.n	800241a <HAL_TIM_PWM_Start+0xfe>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2202      	movs	r2, #2
 8002416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2201      	movs	r2, #1
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fa30 	bl	8003888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <HAL_TIM_PWM_Start+0x208>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_TIM_PWM_Start+0x13e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <HAL_TIM_PWM_Start+0x20c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00e      	beq.n	800245a <HAL_TIM_PWM_Start+0x13e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_TIM_PWM_Start+0x210>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_TIM_PWM_Start+0x13e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a39      	ldr	r2, [pc, #228]	; (8002530 <HAL_TIM_PWM_Start+0x214>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_TIM_PWM_Start+0x13e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a37      	ldr	r2, [pc, #220]	; (8002534 <HAL_TIM_PWM_Start+0x218>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_TIM_PWM_Start+0x142>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_TIM_PWM_Start+0x144>
 800245e:	2300      	movs	r3, #0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2a      	ldr	r2, [pc, #168]	; (8002524 <HAL_TIM_PWM_Start+0x208>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02c      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002486:	d027      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_TIM_PWM_Start+0x21c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a29      	ldr	r2, [pc, #164]	; (800253c <HAL_TIM_PWM_Start+0x220>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d01d      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_TIM_PWM_Start+0x224>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1f      	ldr	r2, [pc, #124]	; (8002528 <HAL_TIM_PWM_Start+0x20c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <HAL_TIM_PWM_Start+0x228>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_TIM_PWM_Start+0x210>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_TIM_PWM_Start+0x22c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_PWM_Start+0x1bc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_TIM_PWM_Start+0x230>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d115      	bne.n	8002504 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_TIM_PWM_Start+0x234>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d015      	beq.n	8002516 <HAL_TIM_PWM_Start+0x1fa>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d011      	beq.n	8002516 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002502:	e008      	b.n	8002516 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e000      	b.n	8002518 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40010000 	.word	0x40010000
 8002528:	40010400 	.word	0x40010400
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800
 8002540:	40000c00 	.word	0x40000c00
 8002544:	40001800 	.word	0x40001800
 8002548:	4000e000 	.word	0x4000e000
 800254c:	4000e400 	.word	0x4000e400
 8002550:	00010007 	.word	0x00010007

08002554 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e049      	b.n	80025fa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fa36 	bl	80009ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fcc6 	bl	8002f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_TIM_IC_Start_IT+0x1e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e023      	b.n	800266a <HAL_TIM_IC_Start_IT+0x66>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d104      	bne.n	8002632 <HAL_TIM_IC_Start_IT+0x2e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e01b      	b.n	800266a <HAL_TIM_IC_Start_IT+0x66>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d104      	bne.n	8002642 <HAL_TIM_IC_Start_IT+0x3e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e013      	b.n	800266a <HAL_TIM_IC_Start_IT+0x66>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d104      	bne.n	8002652 <HAL_TIM_IC_Start_IT+0x4e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	e00b      	b.n	800266a <HAL_TIM_IC_Start_IT+0x66>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2b10      	cmp	r3, #16
 8002656:	d104      	bne.n	8002662 <HAL_TIM_IC_Start_IT+0x5e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e003      	b.n	800266a <HAL_TIM_IC_Start_IT+0x66>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002668:	b2db      	uxtb	r3, r3
 800266a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_TIM_IC_Start_IT+0x78>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e013      	b.n	80026a4 <HAL_TIM_IC_Start_IT+0xa0>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d104      	bne.n	800268c <HAL_TIM_IC_Start_IT+0x88>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e00b      	b.n	80026a4 <HAL_TIM_IC_Start_IT+0xa0>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d104      	bne.n	800269c <HAL_TIM_IC_Start_IT+0x98>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e003      	b.n	80026a4 <HAL_TIM_IC_Start_IT+0xa0>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0ec      	b.n	8002890 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_IC_Start_IT+0xc2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e023      	b.n	800270e <HAL_TIM_IC_Start_IT+0x10a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_IC_Start_IT+0xd2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e01b      	b.n	800270e <HAL_TIM_IC_Start_IT+0x10a>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_IC_Start_IT+0xe2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e013      	b.n	800270e <HAL_TIM_IC_Start_IT+0x10a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_IC_Start_IT+0xf2>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026f4:	e00b      	b.n	800270e <HAL_TIM_IC_Start_IT+0x10a>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_IC_Start_IT+0x102>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002704:	e003      	b.n	800270e <HAL_TIM_IC_Start_IT+0x10a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0x11a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800271c:	e013      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x142>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0x12a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272c:	e00b      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x142>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d104      	bne.n	800273e <HAL_TIM_IC_Start_IT+0x13a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800273c:	e003      	b.n	8002746 <HAL_TIM_IC_Start_IT+0x142>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d841      	bhi.n	80027d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800274c:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <HAL_TIM_IC_Start_IT+0x150>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	080027d1 	.word	0x080027d1
 800275c:	080027d1 	.word	0x080027d1
 8002760:	080027d1 	.word	0x080027d1
 8002764:	0800279b 	.word	0x0800279b
 8002768:	080027d1 	.word	0x080027d1
 800276c:	080027d1 	.word	0x080027d1
 8002770:	080027d1 	.word	0x080027d1
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027d1 	.word	0x080027d1
 800277c:	080027d1 	.word	0x080027d1
 8002780:	080027d1 	.word	0x080027d1
 8002784:	080027bf 	.word	0x080027bf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0202 	orr.w	r2, r2, #2
 8002796:	60da      	str	r2, [r3, #12]
      break;
 8002798:	e01d      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0204 	orr.w	r2, r2, #4
 80027a8:	60da      	str	r2, [r3, #12]
      break;
 80027aa:	e014      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0208 	orr.w	r2, r2, #8
 80027ba:	60da      	str	r2, [r3, #12]
      break;
 80027bc:	e00b      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0210 	orr.w	r2, r2, #16
 80027cc:	60da      	str	r2, [r3, #12]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d158      	bne.n	800288e <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 f84f 	bl	8003888 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_TIM_IC_Start_IT+0x294>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d02c      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d027      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a26      	ldr	r2, [pc, #152]	; (800289c <HAL_TIM_IC_Start_IT+0x298>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d022      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <HAL_TIM_IC_Start_IT+0x29c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01d      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_TIM_IC_Start_IT+0x2a0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d018      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_TIM_IC_Start_IT+0x2a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_TIM_IC_Start_IT+0x2a8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_TIM_IC_Start_IT+0x2ac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_TIM_IC_Start_IT+0x2b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIM_IC_Start_IT+0x24a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_TIM_IC_Start_IT+0x2b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d115      	bne.n	800287a <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_TIM_IC_Start_IT+0x2b8>)
 8002856:	4013      	ands	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d015      	beq.n	800288c <HAL_TIM_IC_Start_IT+0x288>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d011      	beq.n	800288c <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002878:	e008      	b.n	800288c <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e000      	b.n	800288e <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40001800 	.word	0x40001800
 80028b0:	40014000 	.word	0x40014000
 80028b4:	4000e000 	.word	0x4000e000
 80028b8:	4000e400 	.word	0x4000e400
 80028bc:	00010007 	.word	0x00010007

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd fd6c 	bl	80003e0 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 faec 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 faf3 	bl	8002efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd fd42 	bl	80003e0 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fac2 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fac9 	bl	8002efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fd fd18 	bl	80003e0 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa98 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fa9f 	bl	8002efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd fcee 	bl	80003e0 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa6e 	bl	8002ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa75 	bl	8002efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fdea 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 ffd8 	bl	8003a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d10e      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 ffcb 	bl	8003a34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d10e      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d107      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fa23 	bl	8002f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d10e      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0220 	mvn.w	r2, #32
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 ff8b 	bl	8003a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e088      	b.n	8002c2e <HAL_TIM_IC_ConfigChannel+0x130>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11b      	bne.n	8002b62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6819      	ldr	r1, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f000 fd6f 	bl	800361c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020c 	bic.w	r2, r2, #12
 8002b4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6999      	ldr	r1, [r3, #24]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
 8002b60:	e060      	b.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11c      	bne.n	8002ba2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f000 fdd0 	bl	800371c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	021a      	lsls	r2, r3, #8
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
 8002ba0:	e040      	b.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f000 fded 	bl	8003796 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69da      	ldr	r2, [r3, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 020c 	bic.w	r2, r2, #12
 8002bca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69d9      	ldr	r1, [r3, #28]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	61da      	str	r2, [r3, #28]
 8002bde:	e021      	b.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d11c      	bne.n	8002c20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f000 fe0a 	bl	800380e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69d9      	ldr	r1, [r3, #28]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	61da      	str	r2, [r3, #28]
 8002c1e:	e001      	b.n	8002c24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e0ff      	b.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b14      	cmp	r3, #20
 8002c62:	f200 80f0 	bhi.w	8002e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002cc1 	.word	0x08002cc1
 8002c70:	08002e47 	.word	0x08002e47
 8002c74:	08002e47 	.word	0x08002e47
 8002c78:	08002e47 	.word	0x08002e47
 8002c7c:	08002d01 	.word	0x08002d01
 8002c80:	08002e47 	.word	0x08002e47
 8002c84:	08002e47 	.word	0x08002e47
 8002c88:	08002e47 	.word	0x08002e47
 8002c8c:	08002d43 	.word	0x08002d43
 8002c90:	08002e47 	.word	0x08002e47
 8002c94:	08002e47 	.word	0x08002e47
 8002c98:	08002e47 	.word	0x08002e47
 8002c9c:	08002d83 	.word	0x08002d83
 8002ca0:	08002e47 	.word	0x08002e47
 8002ca4:	08002e47 	.word	0x08002e47
 8002ca8:	08002e47 	.word	0x08002e47
 8002cac:	08002dc5 	.word	0x08002dc5
 8002cb0:	08002e47 	.word	0x08002e47
 8002cb4:	08002e47 	.word	0x08002e47
 8002cb8:	08002e47 	.word	0x08002e47
 8002cbc:	08002e05 	.word	0x08002e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f9d2 	bl	8003070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0208 	orr.w	r2, r2, #8
 8002cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	619a      	str	r2, [r3, #24]
      break;
 8002cfe:	e0a5      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fa42 	bl	8003190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6999      	ldr	r1, [r3, #24]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	021a      	lsls	r2, r3, #8
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	619a      	str	r2, [r3, #24]
      break;
 8002d40:	e084      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 faab 	bl	80032a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69da      	ldr	r2, [r3, #28]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0208 	orr.w	r2, r2, #8
 8002d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0204 	bic.w	r2, r2, #4
 8002d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69d9      	ldr	r1, [r3, #28]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	61da      	str	r2, [r3, #28]
      break;
 8002d80:	e064      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fb13 	bl	80033b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69da      	ldr	r2, [r3, #28]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	021a      	lsls	r2, r3, #8
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	61da      	str	r2, [r3, #28]
      break;
 8002dc2:	e043      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb5c 	bl	8003488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e02:	e023      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fba0 	bl	8003550 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e44:	e002      	b.n	8002e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop

08002e60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d831      	bhi.n	8002ed8 <HAL_TIM_ReadCapturedValue+0x78>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002ed9 	.word	0x08002ed9
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002ebb 	.word	0x08002ebb
 8002e90:	08002ed9 	.word	0x08002ed9
 8002e94:	08002ed9 	.word	0x08002ed9
 8002e98:	08002ed9 	.word	0x08002ed9
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ed9 	.word	0x08002ed9
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	08002ed9 	.word	0x08002ed9
 8002eac:	08002ecf 	.word	0x08002ecf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	60fb      	str	r3, [r7, #12]

      break;
 8002eb8:	e00f      	b.n	8002eda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	60fb      	str	r3, [r7, #12]

      break;
 8002ec2:	e00a      	b.n	8002eda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	60fb      	str	r3, [r7, #12]

      break;
 8002ecc:	e005      	b.n	8002eda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	60fb      	str	r3, [r7, #12]

      break;
 8002ed6:	e000      	b.n	8002eda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002ed8:	bf00      	nop
  }

  return tmpreg;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a44      	ldr	r2, [pc, #272]	; (8003048 <TIM_Base_SetConfig+0x124>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f42:	d00f      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a41      	ldr	r2, [pc, #260]	; (800304c <TIM_Base_SetConfig+0x128>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00b      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <TIM_Base_SetConfig+0x12c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3f      	ldr	r2, [pc, #252]	; (8003054 <TIM_Base_SetConfig+0x130>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3e      	ldr	r2, [pc, #248]	; (8003058 <TIM_Base_SetConfig+0x134>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a33      	ldr	r2, [pc, #204]	; (8003048 <TIM_Base_SetConfig+0x124>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f84:	d023      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a30      	ldr	r2, [pc, #192]	; (800304c <TIM_Base_SetConfig+0x128>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2f      	ldr	r2, [pc, #188]	; (8003050 <TIM_Base_SetConfig+0x12c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01b      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2e      	ldr	r2, [pc, #184]	; (8003054 <TIM_Base_SetConfig+0x130>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d017      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <TIM_Base_SetConfig+0x134>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2c      	ldr	r2, [pc, #176]	; (800305c <TIM_Base_SetConfig+0x138>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00f      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <TIM_Base_SetConfig+0x13c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00b      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <TIM_Base_SetConfig+0x140>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <TIM_Base_SetConfig+0x144>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <TIM_Base_SetConfig+0xaa>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <TIM_Base_SetConfig+0x148>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d108      	bne.n	8002fe0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <TIM_Base_SetConfig+0x124>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00f      	beq.n	800302c <TIM_Base_SetConfig+0x108>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <TIM_Base_SetConfig+0x134>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00b      	beq.n	800302c <TIM_Base_SetConfig+0x108>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a11      	ldr	r2, [pc, #68]	; (800305c <TIM_Base_SetConfig+0x138>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d007      	beq.n	800302c <TIM_Base_SetConfig+0x108>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <TIM_Base_SetConfig+0x13c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d003      	beq.n	800302c <TIM_Base_SetConfig+0x108>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <TIM_Base_SetConfig+0x140>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d103      	bne.n	8003034 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	615a      	str	r2, [r3, #20]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40010400 	.word	0x40010400
 800305c:	40014000 	.word	0x40014000
 8003060:	40014400 	.word	0x40014400
 8003064:	40014800 	.word	0x40014800
 8003068:	4000e000 	.word	0x4000e000
 800306c:	4000e400 	.word	0x4000e400

08003070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0201 	bic.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <TIM_OC1_SetConfig+0x108>)
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f023 0302 	bic.w	r3, r3, #2
 80030b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a2d      	ldr	r2, [pc, #180]	; (800317c <TIM_OC1_SetConfig+0x10c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <TIM_OC1_SetConfig+0x7c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <TIM_OC1_SetConfig+0x110>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_OC1_SetConfig+0x7c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <TIM_OC1_SetConfig+0x114>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_OC1_SetConfig+0x7c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <TIM_OC1_SetConfig+0x118>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_OC1_SetConfig+0x7c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a29      	ldr	r2, [pc, #164]	; (800318c <TIM_OC1_SetConfig+0x11c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10c      	bne.n	8003106 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0308 	bic.w	r3, r3, #8
 80030f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1c      	ldr	r2, [pc, #112]	; (800317c <TIM_OC1_SetConfig+0x10c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00f      	beq.n	800312e <TIM_OC1_SetConfig+0xbe>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <TIM_OC1_SetConfig+0x110>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_OC1_SetConfig+0xbe>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <TIM_OC1_SetConfig+0x114>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_OC1_SetConfig+0xbe>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <TIM_OC1_SetConfig+0x118>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC1_SetConfig+0xbe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <TIM_OC1_SetConfig+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	fffeff8f 	.word	0xfffeff8f
 800317c:	40010000 	.word	0x40010000
 8003180:	40010400 	.word	0x40010400
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800

08003190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0210 	bic.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4b34      	ldr	r3, [pc, #208]	; (800328c <TIM_OC2_SetConfig+0xfc>)
 80031bc:	4013      	ands	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0320 	bic.w	r3, r3, #32
 80031da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a29      	ldr	r2, [pc, #164]	; (8003290 <TIM_OC2_SetConfig+0x100>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_OC2_SetConfig+0x68>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a28      	ldr	r2, [pc, #160]	; (8003294 <TIM_OC2_SetConfig+0x104>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10d      	bne.n	8003214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <TIM_OC2_SetConfig+0x100>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00f      	beq.n	800323c <TIM_OC2_SetConfig+0xac>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <TIM_OC2_SetConfig+0x104>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_OC2_SetConfig+0xac>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1c      	ldr	r2, [pc, #112]	; (8003298 <TIM_OC2_SetConfig+0x108>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <TIM_OC2_SetConfig+0xac>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <TIM_OC2_SetConfig+0x10c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC2_SetConfig+0xac>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <TIM_OC2_SetConfig+0x110>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	feff8fff 	.word	0xfeff8fff
 8003290:	40010000 	.word	0x40010000
 8003294:	40010400 	.word	0x40010400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800

080032a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4b33      	ldr	r3, [pc, #204]	; (800339c <TIM_OC3_SetConfig+0xf8>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <TIM_OC3_SetConfig+0xfc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_OC3_SetConfig+0x66>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <TIM_OC3_SetConfig+0x100>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d10d      	bne.n	8003326 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <TIM_OC3_SetConfig+0xfc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <TIM_OC3_SetConfig+0xaa>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <TIM_OC3_SetConfig+0x100>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <TIM_OC3_SetConfig+0xaa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <TIM_OC3_SetConfig+0x104>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_OC3_SetConfig+0xaa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <TIM_OC3_SetConfig+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_OC3_SetConfig+0xaa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <TIM_OC3_SetConfig+0x10c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d113      	bne.n	8003376 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800335c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	fffeff8f 	.word	0xfffeff8f
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40010400 	.word	0x40010400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800

080033b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <TIM_OC4_SetConfig+0xbc>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	031b      	lsls	r3, r3, #12
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a19      	ldr	r2, [pc, #100]	; (8003474 <TIM_OC4_SetConfig+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00f      	beq.n	8003434 <TIM_OC4_SetConfig+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <TIM_OC4_SetConfig+0xc4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_OC4_SetConfig+0x80>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <TIM_OC4_SetConfig+0xc8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_OC4_SetConfig+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <TIM_OC4_SetConfig+0xcc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC4_SetConfig+0x80>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <TIM_OC4_SetConfig+0xd0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d109      	bne.n	8003448 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	feff8fff 	.word	0xfeff8fff
 8003474:	40010000 	.word	0x40010000
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40014400 	.word	0x40014400
 8003484:	40014800 	.word	0x40014800

08003488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <TIM_OC5_SetConfig+0xb0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <TIM_OC5_SetConfig+0xb4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <TIM_OC5_SetConfig+0x76>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <TIM_OC5_SetConfig+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_OC5_SetConfig+0x76>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a16      	ldr	r2, [pc, #88]	; (8003544 <TIM_OC5_SetConfig+0xbc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_OC5_SetConfig+0x76>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <TIM_OC5_SetConfig+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_OC5_SetConfig+0x76>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC5_SetConfig+0xc4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d109      	bne.n	8003512 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	fffeff8f 	.word	0xfffeff8f
 800353c:	40010000 	.word	0x40010000
 8003540:	40010400 	.word	0x40010400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800

08003550 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4b22      	ldr	r3, [pc, #136]	; (8003604 <TIM_OC6_SetConfig+0xb4>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	051b      	lsls	r3, r3, #20
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a19      	ldr	r2, [pc, #100]	; (8003608 <TIM_OC6_SetConfig+0xb8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00f      	beq.n	80035c8 <TIM_OC6_SetConfig+0x78>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <TIM_OC6_SetConfig+0xbc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00b      	beq.n	80035c8 <TIM_OC6_SetConfig+0x78>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <TIM_OC6_SetConfig+0xc0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC6_SetConfig+0x78>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a16      	ldr	r2, [pc, #88]	; (8003614 <TIM_OC6_SetConfig+0xc4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC6_SetConfig+0x78>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <TIM_OC6_SetConfig+0xc8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d109      	bne.n	80035dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	029b      	lsls	r3, r3, #10
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	621a      	str	r2, [r3, #32]
}
 80035f6:	bf00      	nop
 80035f8:	371c      	adds	r7, #28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	feff8fff 	.word	0xfeff8fff
 8003608:	40010000 	.word	0x40010000
 800360c:	40010400 	.word	0x40010400
 8003610:	40014000 	.word	0x40014000
 8003614:	40014400 	.word	0x40014400
 8003618:	40014800 	.word	0x40014800

0800361c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a2c      	ldr	r2, [pc, #176]	; (80036f8 <TIM_TI1_SetConfig+0xdc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d023      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d01f      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <TIM_TI1_SetConfig+0xe0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01b      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <TIM_TI1_SetConfig+0xe4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d017      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a27      	ldr	r2, [pc, #156]	; (8003704 <TIM_TI1_SetConfig+0xe8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4a26      	ldr	r2, [pc, #152]	; (8003708 <TIM_TI1_SetConfig+0xec>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00f      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a25      	ldr	r2, [pc, #148]	; (800370c <TIM_TI1_SetConfig+0xf0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00b      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a24      	ldr	r2, [pc, #144]	; (8003710 <TIM_TI1_SetConfig+0xf4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <TIM_TI1_SetConfig+0xf8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_TI1_SetConfig+0x76>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a22      	ldr	r2, [pc, #136]	; (8003718 <TIM_TI1_SetConfig+0xfc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d101      	bne.n	8003696 <TIM_TI1_SetConfig+0x7a>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <TIM_TI1_SetConfig+0x7c>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0303 	bic.w	r3, r3, #3
 80036a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e003      	b.n	80036b6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f023 030a 	bic.w	r3, r3, #10
 80036d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f003 030a 	and.w	r3, r3, #10
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40001800 	.word	0x40001800
 8003710:	40014000 	.word	0x40014000
 8003714:	4000e000 	.word	0x4000e000
 8003718:	4000e400 	.word	0x4000e400

0800371c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0210 	bic.w	r2, r3, #16
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800375a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	031b      	lsls	r3, r3, #12
 8003760:	b29b      	uxth	r3, r3
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800376e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800384c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	b29b      	uxth	r3, r3
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003860:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2201      	movs	r2, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1a      	ldr	r2, [r3, #32]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	401a      	ands	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e077      	b.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d027      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10c      	bne.n	80039ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010400 	.word	0x40010400
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40001800 	.word	0x40001800
 8003a00:	40014000 	.word	0x40014000
 8003a04:	4000e000 	.word	0x4000e000
 8003a08:	4000e400 	.word	0x4000e400

08003a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5a:	2b84      	cmp	r3, #132	; 0x84
 8003a5c:	d005      	beq.n	8003a6a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	3303      	adds	r3, #3
 8003a68:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a7c:	f000 faf6 	bl	800406c <vTaskStartScheduler>
  
  return osOK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a88:	b089      	sub	sp, #36	; 0x24
 8003a8a:	af04      	add	r7, sp, #16
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <osThreadCreate+0x54>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01c      	beq.n	8003ada <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685c      	ldr	r4, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681d      	ldr	r5, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691e      	ldr	r6, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ffc8 	bl	8003a48 <makeFreeRtosPriority>
 8003ab8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ac2:	9202      	str	r2, [sp, #8]
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	9100      	str	r1, [sp, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4632      	mov	r2, r6
 8003acc:	4629      	mov	r1, r5
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 f8ed 	bl	8003cae <xTaskCreateStatic>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e01c      	b.n	8003b14 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685c      	ldr	r4, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae6:	b29e      	uxth	r6, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ffaa 	bl	8003a48 <makeFreeRtosPriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	9200      	str	r2, [sp, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	4632      	mov	r2, r6
 8003b02:	4629      	mov	r1, r5
 8003b04:	4620      	mov	r0, r4
 8003b06:	f000 f92f 	bl	8003d68 <xTaskCreate>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d001      	beq.n	8003b14 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b14:	68fb      	ldr	r3, [r7, #12]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <osDelay+0x16>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e000      	b.n	8003b36 <osDelay+0x18>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fa64 	bl	8004004 <vTaskDelay>
  
  return osOK;
 8003b3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f103 0208 	add.w	r2, r3, #8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f103 0208 	add.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d103      	bne.n	8003c08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	e00c      	b.n	8003c22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e002      	b.n	8003c16 <vListInsert+0x2e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d2f6      	bcs.n	8003c10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b085      	sub	sp, #20
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6852      	ldr	r2, [r2, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d103      	bne.n	8003c8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b08e      	sub	sp, #56	; 0x38
 8003cb2:	af04      	add	r7, sp, #16
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	61fb      	str	r3, [r7, #28]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cf4:	23b4      	movs	r3, #180	; 0xb4
 8003cf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2bb4      	cmp	r3, #180	; 0xb4
 8003cfc:	d00a      	beq.n	8003d14 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61bb      	str	r3, [r7, #24]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01e      	beq.n	8003d5a <xTaskCreateStatic+0xac>
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d34:	2300      	movs	r3, #0
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f851 	bl	8003df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d54:	f000 f8ec 	bl	8003f30 <prvAddNewTaskToReadyList>
 8003d58:	e001      	b.n	8003d5e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d5e:	697b      	ldr	r3, [r7, #20]
	}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af04      	add	r7, sp, #16
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fef3 	bl	8004b68 <pvPortMalloc>
 8003d82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d8a:	20b4      	movs	r0, #180	; 0xb4
 8003d8c:	f000 feec 	bl	8004b68 <pvPortMalloc>
 8003d90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d9e:	e005      	b.n	8003dac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003da0:	6978      	ldr	r0, [r7, #20]
 8003da2:	f000 ffad 	bl	8004d00 <vPortFree>
 8003da6:	e001      	b.n	8003dac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003dba:	88fa      	ldrh	r2, [r7, #6]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f80f 	bl	8003df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dd6:	69f8      	ldr	r0, [r7, #28]
 8003dd8:	f000 f8aa 	bl	8003f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e002      	b.n	8003de8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003de8:	69bb      	ldr	r3, [r7, #24]
	}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003e0c:	440b      	add	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	617b      	str	r3, [r7, #20]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01f      	beq.n	8003e82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	e012      	b.n	8003e6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	7819      	ldrb	r1, [r3, #0]
 8003e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	3334      	adds	r3, #52	; 0x34
 8003e58:	460a      	mov	r2, r1
 8003e5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b0f      	cmp	r3, #15
 8003e72:	d9e9      	bls.n	8003e48 <prvInitialiseNewTask+0x54>
 8003e74:	e000      	b.n	8003e78 <prvInitialiseNewTask+0x84>
			{
				break;
 8003e76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e80:	e003      	b.n	8003e8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d901      	bls.n	8003e94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e90:	2306      	movs	r3, #6
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fe6b 	bl	8003b86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fe66 	bl	8003b86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	f1c3 0207 	rsb	r2, r3, #7
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	334c      	adds	r3, #76	; 0x4c
 8003ee4:	2260      	movs	r2, #96	; 0x60
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 f84d 	bl	8004f88 <memset>
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <prvInitialiseNewTask+0x130>)
 8003ef2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	4a0c      	ldr	r2, [pc, #48]	; (8003f28 <prvInitialiseNewTask+0x134>)
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <prvInitialiseNewTask+0x138>)
 8003efe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	69b8      	ldr	r0, [r7, #24]
 8003f06:	f000 fc1f 	bl	8004748 <pxPortInitialiseStack>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f1c:	bf00      	nop
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	0800519c 	.word	0x0800519c
 8003f28:	080051bc 	.word	0x080051bc
 8003f2c:	0800517c 	.word	0x0800517c

08003f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f38:	f000 fd34 	bl	80049a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <prvAddNewTaskToReadyList+0xb8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3301      	adds	r3, #1
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <prvAddNewTaskToReadyList+0xb8>)
 8003f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f46:	4b29      	ldr	r3, [pc, #164]	; (8003fec <prvAddNewTaskToReadyList+0xbc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d109      	bne.n	8003f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f4e:	4a27      	ldr	r2, [pc, #156]	; (8003fec <prvAddNewTaskToReadyList+0xbc>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <prvAddNewTaskToReadyList+0xb8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d110      	bne.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f5c:	f000 facc 	bl	80044f8 <prvInitialiseTaskLists>
 8003f60:	e00d      	b.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f62:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <prvAddNewTaskToReadyList+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <prvAddNewTaskToReadyList+0xbc>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d802      	bhi.n	8003f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <prvAddNewTaskToReadyList+0xbc>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3301      	adds	r3, #1
 8003f84:	4a1b      	ldr	r2, [pc, #108]	; (8003ff4 <prvAddNewTaskToReadyList+0xc4>)
 8003f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <prvAddNewTaskToReadyList+0xc8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <prvAddNewTaskToReadyList+0xc8>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <prvAddNewTaskToReadyList+0xcc>)
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7ff fdf5 	bl	8003ba0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003fb6:	f000 fd25 	bl	8004a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <prvAddNewTaskToReadyList+0xc0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <prvAddNewTaskToReadyList+0xbc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d207      	bcs.n	8003fe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <prvAddNewTaskToReadyList+0xd0>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	2400045c 	.word	0x2400045c
 8003fec:	2400035c 	.word	0x2400035c
 8003ff0:	24000468 	.word	0x24000468
 8003ff4:	24000478 	.word	0x24000478
 8003ff8:	24000464 	.word	0x24000464
 8003ffc:	24000360 	.word	0x24000360
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d017      	beq.n	8004046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <vTaskDelay+0x60>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <vTaskDelay+0x30>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004034:	f000 f884 	bl	8004140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004038:	2100      	movs	r1, #0
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fb1e 	bl	800467c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004040:	f000 f88c 	bl	800415c <xTaskResumeAll>
 8004044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <vTaskDelay+0x64>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	24000484 	.word	0x24000484
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b08a      	sub	sp, #40	; 0x28
 8004070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800407a:	463a      	mov	r2, r7
 800407c:	1d39      	adds	r1, r7, #4
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc f944 	bl	8000310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	9202      	str	r2, [sp, #8]
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	2300      	movs	r3, #0
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	2300      	movs	r3, #0
 8004098:	460a      	mov	r2, r1
 800409a:	4921      	ldr	r1, [pc, #132]	; (8004120 <vTaskStartScheduler+0xb4>)
 800409c:	4821      	ldr	r0, [pc, #132]	; (8004124 <vTaskStartScheduler+0xb8>)
 800409e:	f7ff fe06 	bl	8003cae <xTaskCreateStatic>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4a20      	ldr	r2, [pc, #128]	; (8004128 <vTaskStartScheduler+0xbc>)
 80040a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <vTaskStartScheduler+0xbc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80040b0:	2301      	movs	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e001      	b.n	80040ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11b      	bne.n	80040f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <vTaskStartScheduler+0xc0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	334c      	adds	r3, #76	; 0x4c
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <vTaskStartScheduler+0xc4>)
 80040dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040de:	4b15      	ldr	r3, [pc, #84]	; (8004134 <vTaskStartScheduler+0xc8>)
 80040e0:	f04f 32ff 	mov.w	r2, #4294967295
 80040e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <vTaskStartScheduler+0xcc>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040ec:	4b13      	ldr	r3, [pc, #76]	; (800413c <vTaskStartScheduler+0xd0>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040f2:	f000 fbb5 	bl	8004860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040f6:	e00e      	b.n	8004116 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fe:	d10a      	bne.n	8004116 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60fb      	str	r3, [r7, #12]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <vTaskStartScheduler+0xa8>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	08005164 	.word	0x08005164
 8004124:	080044c9 	.word	0x080044c9
 8004128:	24000480 	.word	0x24000480
 800412c:	2400035c 	.word	0x2400035c
 8004130:	24000014 	.word	0x24000014
 8004134:	2400047c 	.word	0x2400047c
 8004138:	24000468 	.word	0x24000468
 800413c:	24000460 	.word	0x24000460

08004140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <vTaskSuspendAll+0x18>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3301      	adds	r3, #1
 800414a:	4a03      	ldr	r2, [pc, #12]	; (8004158 <vTaskSuspendAll+0x18>)
 800414c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800414e:	bf00      	nop
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	24000484 	.word	0x24000484

0800415c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <xTaskResumeAll+0x114>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10a      	bne.n	8004188 <xTaskResumeAll+0x2c>
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	603b      	str	r3, [r7, #0]
}
 8004184:	bf00      	nop
 8004186:	e7fe      	b.n	8004186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004188:	f000 fc0c 	bl	80049a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800418c:	4b38      	ldr	r3, [pc, #224]	; (8004270 <xTaskResumeAll+0x114>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3b01      	subs	r3, #1
 8004192:	4a37      	ldr	r2, [pc, #220]	; (8004270 <xTaskResumeAll+0x114>)
 8004194:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <xTaskResumeAll+0x114>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d161      	bne.n	8004262 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <xTaskResumeAll+0x118>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d05d      	beq.n	8004262 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041a6:	e02e      	b.n	8004206 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <xTaskResumeAll+0x11c>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3318      	adds	r3, #24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fd50 	bl	8003c5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3304      	adds	r3, #4
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fd4b 	bl	8003c5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <xTaskResumeAll+0x120>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	4a2a      	ldr	r2, [pc, #168]	; (800427c <xTaskResumeAll+0x120>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a27      	ldr	r2, [pc, #156]	; (8004280 <xTaskResumeAll+0x124>)
 80041e4:	441a      	add	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7ff fcd7 	bl	8003ba0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <xTaskResumeAll+0x128>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <xTaskResumeAll+0x12c>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004206:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <xTaskResumeAll+0x11c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1cc      	bne.n	80041a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004214:	f000 fa12 	bl	800463c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <xTaskResumeAll+0x130>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004224:	f000 f836 	bl	8004294 <xTaskIncrementTick>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800422e:	4b16      	ldr	r3, [pc, #88]	; (8004288 <xTaskResumeAll+0x12c>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f1      	bne.n	8004224 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004240:	4b12      	ldr	r3, [pc, #72]	; (800428c <xTaskResumeAll+0x130>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <xTaskResumeAll+0x12c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800424e:	2301      	movs	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <xTaskResumeAll+0x134>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f000 fbcf 	bl	8004a04 <vPortExitCritical>

	return xAlreadyYielded;
 8004266:	68bb      	ldr	r3, [r7, #8]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	24000484 	.word	0x24000484
 8004274:	2400045c 	.word	0x2400045c
 8004278:	2400041c 	.word	0x2400041c
 800427c:	24000464 	.word	0x24000464
 8004280:	24000360 	.word	0x24000360
 8004284:	2400035c 	.word	0x2400035c
 8004288:	24000470 	.word	0x24000470
 800428c:	2400046c 	.word	0x2400046c
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429e:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <xTaskIncrementTick+0x144>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f040 808e 	bne.w	80043c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042a8:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <xTaskIncrementTick+0x148>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <xTaskIncrementTick+0x148>)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d120      	bne.n	80042fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <xTaskIncrementTick+0x14c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <xTaskIncrementTick+0x48>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	603b      	str	r3, [r7, #0]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <xTaskIncrementTick+0x46>
 80042dc:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <xTaskIncrementTick+0x14c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	4b40      	ldr	r3, [pc, #256]	; (80043e4 <xTaskIncrementTick+0x150>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3e      	ldr	r2, [pc, #248]	; (80043e0 <xTaskIncrementTick+0x14c>)
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4a3e      	ldr	r2, [pc, #248]	; (80043e4 <xTaskIncrementTick+0x150>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b3d      	ldr	r3, [pc, #244]	; (80043e8 <xTaskIncrementTick+0x154>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	4a3c      	ldr	r2, [pc, #240]	; (80043e8 <xTaskIncrementTick+0x154>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	f000 f99f 	bl	800463c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042fe:	4b3b      	ldr	r3, [pc, #236]	; (80043ec <xTaskIncrementTick+0x158>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	429a      	cmp	r2, r3
 8004306:	d348      	bcc.n	800439a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <xTaskIncrementTick+0x14c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d104      	bne.n	800431c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <xTaskIncrementTick+0x158>)
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	601a      	str	r2, [r3, #0]
					break;
 800431a:	e03e      	b.n	800439a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <xTaskIncrementTick+0x14c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d203      	bcs.n	800433c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004334:	4a2d      	ldr	r2, [pc, #180]	; (80043ec <xTaskIncrementTick+0x158>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800433a:	e02e      	b.n	800439a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3304      	adds	r3, #4
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fc8a 	bl	8003c5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3318      	adds	r3, #24
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fc81 	bl	8003c5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <xTaskIncrementTick+0x15c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <xTaskIncrementTick+0x15c>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <xTaskIncrementTick+0x160>)
 8004378:	441a      	add	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7ff fc0d 	bl	8003ba0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <xTaskIncrementTick+0x164>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d3b9      	bcc.n	8004308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004398:	e7b6      	b.n	8004308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <xTaskIncrementTick+0x164>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4914      	ldr	r1, [pc, #80]	; (80043f4 <xTaskIncrementTick+0x160>)
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d901      	bls.n	80043b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <xTaskIncrementTick+0x168>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	e004      	b.n	80043ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <xTaskIncrementTick+0x16c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <xTaskIncrementTick+0x16c>)
 80043cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043ce:	697b      	ldr	r3, [r7, #20]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	24000484 	.word	0x24000484
 80043dc:	24000460 	.word	0x24000460
 80043e0:	24000414 	.word	0x24000414
 80043e4:	24000418 	.word	0x24000418
 80043e8:	24000474 	.word	0x24000474
 80043ec:	2400047c 	.word	0x2400047c
 80043f0:	24000464 	.word	0x24000464
 80043f4:	24000360 	.word	0x24000360
 80043f8:	2400035c 	.word	0x2400035c
 80043fc:	24000470 	.word	0x24000470
 8004400:	2400046c 	.word	0x2400046c

08004404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440a:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <vTaskSwitchContext+0xac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004412:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <vTaskSwitchContext+0xb0>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004418:	e044      	b.n	80044a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <vTaskSwitchContext+0xb0>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <vTaskSwitchContext+0xb4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800442e:	7afb      	ldrb	r3, [r7, #11]
 8004430:	f1c3 031f 	rsb	r3, r3, #31
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	4921      	ldr	r1, [pc, #132]	; (80044bc <vTaskSwitchContext+0xb8>)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <vTaskSwitchContext+0x5c>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	607b      	str	r3, [r7, #4]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vTaskSwitchContext+0x5a>
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a14      	ldr	r2, [pc, #80]	; (80044bc <vTaskSwitchContext+0xb8>)
 800446c:	4413      	add	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	3308      	adds	r3, #8
 8004482:	429a      	cmp	r2, r3
 8004484:	d104      	bne.n	8004490 <vTaskSwitchContext+0x8c>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <vTaskSwitchContext+0xbc>)
 8004498:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <vTaskSwitchContext+0xbc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	334c      	adds	r3, #76	; 0x4c
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <vTaskSwitchContext+0xc0>)
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	24000484 	.word	0x24000484
 80044b4:	24000470 	.word	0x24000470
 80044b8:	24000464 	.word	0x24000464
 80044bc:	24000360 	.word	0x24000360
 80044c0:	2400035c 	.word	0x2400035c
 80044c4:	24000014 	.word	0x24000014

080044c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044d0:	f000 f852 	bl	8004578 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <prvIdleTask+0x28>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d9f9      	bls.n	80044d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <prvIdleTask+0x2c>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044ec:	e7f0      	b.n	80044d0 <prvIdleTask+0x8>
 80044ee:	bf00      	nop
 80044f0:	24000360 	.word	0x24000360
 80044f4:	e000ed04 	.word	0xe000ed04

080044f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	e00c      	b.n	800451e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <prvInitialiseTaskLists+0x60>)
 8004510:	4413      	add	r3, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb17 	bl	8003b46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3301      	adds	r3, #1
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b06      	cmp	r3, #6
 8004522:	d9ef      	bls.n	8004504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004524:	480d      	ldr	r0, [pc, #52]	; (800455c <prvInitialiseTaskLists+0x64>)
 8004526:	f7ff fb0e 	bl	8003b46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800452a:	480d      	ldr	r0, [pc, #52]	; (8004560 <prvInitialiseTaskLists+0x68>)
 800452c:	f7ff fb0b 	bl	8003b46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004530:	480c      	ldr	r0, [pc, #48]	; (8004564 <prvInitialiseTaskLists+0x6c>)
 8004532:	f7ff fb08 	bl	8003b46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004536:	480c      	ldr	r0, [pc, #48]	; (8004568 <prvInitialiseTaskLists+0x70>)
 8004538:	f7ff fb05 	bl	8003b46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800453c:	480b      	ldr	r0, [pc, #44]	; (800456c <prvInitialiseTaskLists+0x74>)
 800453e:	f7ff fb02 	bl	8003b46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <prvInitialiseTaskLists+0x78>)
 8004544:	4a05      	ldr	r2, [pc, #20]	; (800455c <prvInitialiseTaskLists+0x64>)
 8004546:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <prvInitialiseTaskLists+0x7c>)
 800454a:	4a05      	ldr	r2, [pc, #20]	; (8004560 <prvInitialiseTaskLists+0x68>)
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24000360 	.word	0x24000360
 800455c:	240003ec 	.word	0x240003ec
 8004560:	24000400 	.word	0x24000400
 8004564:	2400041c 	.word	0x2400041c
 8004568:	24000430 	.word	0x24000430
 800456c:	24000448 	.word	0x24000448
 8004570:	24000414 	.word	0x24000414
 8004574:	24000418 	.word	0x24000418

08004578 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457e:	e019      	b.n	80045b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004580:	f000 fa10 	bl	80049a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <prvCheckTasksWaitingTermination+0x50>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fb62 	bl	8003c5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <prvCheckTasksWaitingTermination+0x54>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3b01      	subs	r3, #1
 800459c:	4a0b      	ldr	r2, [pc, #44]	; (80045cc <prvCheckTasksWaitingTermination+0x54>)
 800459e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <prvCheckTasksWaitingTermination+0x58>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <prvCheckTasksWaitingTermination+0x58>)
 80045a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045aa:	f000 fa2b 	bl	8004a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f810 	bl	80045d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <prvCheckTasksWaitingTermination+0x58>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e1      	bne.n	8004580 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	24000430 	.word	0x24000430
 80045cc:	2400045c 	.word	0x2400045c
 80045d0:	24000444 	.word	0x24000444

080045d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	334c      	adds	r3, #76	; 0x4c
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fce7 	bl	8004fb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fb83 	bl	8004d00 <vPortFree>
				vPortFree( pxTCB );
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fb80 	bl	8004d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004600:	e018      	b.n	8004634 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d103      	bne.n	8004614 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb77 	bl	8004d00 <vPortFree>
	}
 8004612:	e00f      	b.n	8004634 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800461a:	2b02      	cmp	r3, #2
 800461c:	d00a      	beq.n	8004634 <prvDeleteTCB+0x60>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <prvDeleteTCB+0x5e>
	}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <prvResetNextTaskUnblockTime+0x38>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d104      	bne.n	8004656 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <prvResetNextTaskUnblockTime+0x3c>)
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004654:	e008      	b.n	8004668 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004656:	4b07      	ldr	r3, [pc, #28]	; (8004674 <prvResetNextTaskUnblockTime+0x38>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <prvResetNextTaskUnblockTime+0x3c>)
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	24000414 	.word	0x24000414
 8004678:	2400047c 	.word	0x2400047c

0800467c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468c:	4b28      	ldr	r3, [pc, #160]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fae1 	bl	8003c5a <uxListRemove>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	2201      	movs	r2, #1
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4013      	ands	r3, r2
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d10a      	bne.n	80046d4 <prvAddCurrentTaskToDelayedList+0x58>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	481a      	ldr	r0, [pc, #104]	; (8004738 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046ce:	f7ff fa67 	bl	8003ba0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d2:	e026      	b.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d209      	bcs.n	8004700 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ec:	4b13      	ldr	r3, [pc, #76]	; (800473c <prvAddCurrentTaskToDelayedList+0xc0>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7ff fa75 	bl	8003be8 <vListInsert>
}
 80046fe:	e010      	b.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004700:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7ff fa6b 	bl	8003be8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d202      	bcs.n	8004722 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <prvAddCurrentTaskToDelayedList+0xc8>)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	6013      	str	r3, [r2, #0]
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	24000460 	.word	0x24000460
 8004730:	2400035c 	.word	0x2400035c
 8004734:	24000464 	.word	0x24000464
 8004738:	24000448 	.word	0x24000448
 800473c:	24000418 	.word	0x24000418
 8004740:	24000414 	.word	0x24000414
 8004744:	2400047c 	.word	0x2400047c

08004748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b04      	subs	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b04      	subs	r3, #4
 8004766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0201 	bic.w	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b04      	subs	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <pxPortInitialiseStack+0x64>)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b14      	subs	r3, #20
 8004782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f06f 0202 	mvn.w	r2, #2
 8004796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3b20      	subs	r3, #32
 800479c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	080047b1 	.word	0x080047b1

080047b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <prvTaskExitError+0x54>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d00a      	beq.n	80047da <prvTaskExitError+0x2a>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <prvTaskExitError+0x28>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	60bb      	str	r3, [r7, #8]
}
 80047ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80047ee:	bf00      	nop
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0fc      	beq.n	80047f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	24000010 	.word	0x24000010
	...

08004810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <pxCurrentTCBConst2>)
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	f380 8809 	msr	PSP, r0
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f380 8811 	msr	BASEPRI, r0
 800482a:	4770      	bx	lr
 800482c:	f3af 8000 	nop.w

08004830 <pxCurrentTCBConst2>:
 8004830:	2400035c 	.word	0x2400035c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop

08004838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004838:	4808      	ldr	r0, [pc, #32]	; (800485c <prvPortStartFirstTask+0x24>)
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	6800      	ldr	r0, [r0, #0]
 800483e:	f380 8808 	msr	MSP, r0
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8814 	msr	CONTROL, r0
 800484a:	b662      	cpsie	i
 800484c:	b661      	cpsie	f
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	df00      	svc	0
 8004858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800485a:	bf00      	nop
 800485c:	e000ed08 	.word	0xe000ed08

08004860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004866:	4b46      	ldr	r3, [pc, #280]	; (8004980 <xPortStartScheduler+0x120>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a46      	ldr	r2, [pc, #280]	; (8004984 <xPortStartScheduler+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10a      	bne.n	8004886 <xPortStartScheduler+0x26>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	613b      	str	r3, [r7, #16]
}
 8004882:	bf00      	nop
 8004884:	e7fe      	b.n	8004884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004886:	4b3e      	ldr	r3, [pc, #248]	; (8004980 <xPortStartScheduler+0x120>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <xPortStartScheduler+0x128>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10a      	bne.n	80048a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048a6:	4b39      	ldr	r3, [pc, #228]	; (800498c <xPortStartScheduler+0x12c>)
 80048a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4b31      	ldr	r3, [pc, #196]	; (8004990 <xPortStartScheduler+0x130>)
 80048cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <xPortStartScheduler+0x134>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048d4:	e009      	b.n	80048ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80048d6:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <xPortStartScheduler+0x134>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3b01      	subs	r3, #1
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <xPortStartScheduler+0x134>)
 80048de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f2:	2b80      	cmp	r3, #128	; 0x80
 80048f4:	d0ef      	beq.n	80048d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <xPortStartScheduler+0x134>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d00a      	beq.n	8004918 <xPortStartScheduler+0xb8>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	60bb      	str	r3, [r7, #8]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <xPortStartScheduler+0x134>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <xPortStartScheduler+0x134>)
 8004920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004922:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <xPortStartScheduler+0x134>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800492a:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <xPortStartScheduler+0x134>)
 800492c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <xPortStartScheduler+0x138>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a17      	ldr	r2, [pc, #92]	; (8004998 <xPortStartScheduler+0x138>)
 800493c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <xPortStartScheduler+0x138>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <xPortStartScheduler+0x138>)
 8004948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800494c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800494e:	f000 f8dd 	bl	8004b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <xPortStartScheduler+0x13c>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004958:	f000 f8fc 	bl	8004b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <xPortStartScheduler+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0f      	ldr	r2, [pc, #60]	; (80049a0 <xPortStartScheduler+0x140>)
 8004962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004968:	f7ff ff66 	bl	8004838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800496c:	f7ff fd4a 	bl	8004404 <vTaskSwitchContext>
	prvTaskExitError();
 8004970:	f7ff ff1e 	bl	80047b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00
 8004984:	410fc271 	.word	0x410fc271
 8004988:	410fc270 	.word	0x410fc270
 800498c:	e000e400 	.word	0xe000e400
 8004990:	24000488 	.word	0x24000488
 8004994:	2400048c 	.word	0x2400048c
 8004998:	e000ed20 	.word	0xe000ed20
 800499c:	24000010 	.word	0x24000010
 80049a0:	e000ef34 	.word	0xe000ef34

080049a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	607b      	str	r3, [r7, #4]
}
 80049bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <vPortEnterCritical+0x58>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <vPortEnterCritical+0x58>)
 80049c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <vPortEnterCritical+0x58>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10f      	bne.n	80049f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortEnterCritical+0x5c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	603b      	str	r3, [r7, #0]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <vPortEnterCritical+0x4a>
	}
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	24000010 	.word	0x24000010
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <vPortExitCritical+0x50>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <vPortExitCritical+0x24>
	__asm volatile
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	607b      	str	r3, [r7, #4]
}
 8004a24:	bf00      	nop
 8004a26:	e7fe      	b.n	8004a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <vPortExitCritical+0x50>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <vPortExitCritical+0x50>)
 8004a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a32:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <vPortExitCritical+0x50>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d105      	bne.n	8004a46 <vPortExitCritical+0x42>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	24000010 	.word	0x24000010
	...

08004a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a60:	f3ef 8009 	mrs	r0, PSP
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <pxCurrentTCBConst>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f01e 0f10 	tst.w	lr, #16
 8004a70:	bf08      	it	eq
 8004a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a7a:	6010      	str	r0, [r2, #0]
 8004a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a84:	f380 8811 	msr	BASEPRI, r0
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f7ff fcb8 	bl	8004404 <vTaskSwitchContext>
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f380 8811 	msr	BASEPRI, r0
 8004a9c:	bc09      	pop	{r0, r3}
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	6808      	ldr	r0, [r1, #0]
 8004aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa6:	f01e 0f10 	tst.w	lr, #16
 8004aaa:	bf08      	it	eq
 8004aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ab0:	f380 8809 	msr	PSP, r0
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	f3af 8000 	nop.w

08004ac0 <pxCurrentTCBConst>:
 8004ac0:	2400035c 	.word	0x2400035c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop

08004ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	607b      	str	r3, [r7, #4]
}
 8004ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ae2:	f7ff fbd7 	bl	8004294 <xTaskIncrementTick>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <SysTick_Handler+0x40>)
 8004aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <vPortSetupTimerInterrupt+0x38>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <vPortSetupTimerInterrupt+0x3c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <vPortSetupTimerInterrupt+0x40>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	099b      	lsrs	r3, r3, #6
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <vPortSetupTimerInterrupt+0x44>)
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <vPortSetupTimerInterrupt+0x34>)
 8004b30:	2207      	movs	r2, #7
 8004b32:	601a      	str	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e010 	.word	0xe000e010
 8004b44:	e000e018 	.word	0xe000e018
 8004b48:	24000000 	.word	0x24000000
 8004b4c:	10624dd3 	.word	0x10624dd3
 8004b50:	e000e014 	.word	0xe000e014

08004b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b64 <vPortEnableVFP+0x10>
 8004b58:	6801      	ldr	r1, [r0, #0]
 8004b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b5e:	6001      	str	r1, [r0, #0]
 8004b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b62:	bf00      	nop
 8004b64:	e000ed88 	.word	0xe000ed88

08004b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b74:	f7ff fae4 	bl	8004140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <pvPortMalloc+0x180>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b80:	f000 f920 	bl	8004dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b84:	4b59      	ldr	r3, [pc, #356]	; (8004cec <pvPortMalloc+0x184>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8093 	bne.w	8004cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01d      	beq.n	8004bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004b98:	2208      	movs	r2, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d014      	beq.n	8004bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	617b      	str	r3, [r7, #20]
}
 8004bd0:	bf00      	nop
 8004bd2:	e7fe      	b.n	8004bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d06e      	beq.n	8004cb8 <pvPortMalloc+0x150>
 8004bda:	4b45      	ldr	r3, [pc, #276]	; (8004cf0 <pvPortMalloc+0x188>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d869      	bhi.n	8004cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <pvPortMalloc+0x18c>)
 8004be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <pvPortMalloc+0x18c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bee:	e004      	b.n	8004bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d903      	bls.n	8004c0c <pvPortMalloc+0xa4>
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f1      	bne.n	8004bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c0c:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <pvPortMalloc+0x180>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d050      	beq.n	8004cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	2308      	movs	r3, #8
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d91f      	bls.n	8004c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <pvPortMalloc+0xf8>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	613b      	str	r3, [r7, #16]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c72:	69b8      	ldr	r0, [r7, #24]
 8004c74:	f000 f908 	bl	8004e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c86:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <pvPortMalloc+0x190>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d203      	bcs.n	8004c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <pvPortMalloc+0x188>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <pvPortMalloc+0x190>)
 8004c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <pvPortMalloc+0x184>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <pvPortMalloc+0x194>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <pvPortMalloc+0x194>)
 8004cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cb8:	f7ff fa50 	bl	800415c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <pvPortMalloc+0x174>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60fb      	str	r3, [r7, #12]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <pvPortMalloc+0x172>
	return pvReturn;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	24004098 	.word	0x24004098
 8004cec:	240040ac 	.word	0x240040ac
 8004cf0:	2400409c 	.word	0x2400409c
 8004cf4:	24004090 	.word	0x24004090
 8004cf8:	240040a0 	.word	0x240040a0
 8004cfc:	240040a4 	.word	0x240040a4

08004d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d04d      	beq.n	8004dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d12:	2308      	movs	r3, #8
 8004d14:	425b      	negs	r3, r3
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4413      	add	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <vPortFree+0xb8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <vPortFree+0x44>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	60fb      	str	r3, [r7, #12]
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <vPortFree+0x62>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	60bb      	str	r3, [r7, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <vPortFree+0xb8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01e      	beq.n	8004dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11a      	bne.n	8004dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <vPortFree+0xb8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d88:	f7ff f9da 	bl	8004140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <vPortFree+0xbc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4413      	add	r3, r2
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <vPortFree+0xbc>)
 8004d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d9a:	6938      	ldr	r0, [r7, #16]
 8004d9c:	f000 f874 	bl	8004e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004da0:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <vPortFree+0xc0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <vPortFree+0xc0>)
 8004da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004daa:	f7ff f9d7 	bl	800415c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	240040ac 	.word	0x240040ac
 8004dbc:	2400409c 	.word	0x2400409c
 8004dc0:	240040a8 	.word	0x240040a8

08004dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004dd0:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <prvHeapInit+0xac>)
 8004dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3307      	adds	r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <prvHeapInit+0xac>)
 8004df4:	4413      	add	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <prvHeapInit+0xb0>)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <prvHeapInit+0xb0>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e10:	2208      	movs	r2, #8
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <prvHeapInit+0xb4>)
 8004e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e26:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <prvHeapInit+0xb4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <prvHeapInit+0xb4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	1ad2      	subs	r2, r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <prvHeapInit+0xb4>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <prvHeapInit+0xb8>)
 8004e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <prvHeapInit+0xbc>)
 8004e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <prvHeapInit+0xc0>)
 8004e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	24000490 	.word	0x24000490
 8004e74:	24004090 	.word	0x24004090
 8004e78:	24004098 	.word	0x24004098
 8004e7c:	240040a0 	.word	0x240040a0
 8004e80:	2400409c 	.word	0x2400409c
 8004e84:	240040ac 	.word	0x240040ac

08004e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e90:	4b28      	ldr	r3, [pc, #160]	; (8004f34 <prvInsertBlockIntoFreeList+0xac>)
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e002      	b.n	8004e9c <prvInsertBlockIntoFreeList+0x14>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d8f7      	bhi.n	8004e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d108      	bne.n	8004eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d118      	bne.n	8004f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <prvInsertBlockIntoFreeList+0xb0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d00d      	beq.n	8004f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e008      	b.n	8004f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <prvInsertBlockIntoFreeList+0xb0>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e003      	b.n	8004f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d002      	beq.n	8004f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	24004090 	.word	0x24004090
 8004f38:	24004098 	.word	0x24004098

08004f3c <__libc_init_array>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4d0d      	ldr	r5, [pc, #52]	; (8004f74 <__libc_init_array+0x38>)
 8004f40:	4c0d      	ldr	r4, [pc, #52]	; (8004f78 <__libc_init_array+0x3c>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	2600      	movs	r6, #0
 8004f48:	42a6      	cmp	r6, r4
 8004f4a:	d109      	bne.n	8004f60 <__libc_init_array+0x24>
 8004f4c:	4d0b      	ldr	r5, [pc, #44]	; (8004f7c <__libc_init_array+0x40>)
 8004f4e:	4c0c      	ldr	r4, [pc, #48]	; (8004f80 <__libc_init_array+0x44>)
 8004f50:	f000 f8e8 	bl	8005124 <_init>
 8004f54:	1b64      	subs	r4, r4, r5
 8004f56:	10a4      	asrs	r4, r4, #2
 8004f58:	2600      	movs	r6, #0
 8004f5a:	42a6      	cmp	r6, r4
 8004f5c:	d105      	bne.n	8004f6a <__libc_init_array+0x2e>
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f64:	4798      	blx	r3
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7ee      	b.n	8004f48 <__libc_init_array+0xc>
 8004f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f6e:	4798      	blx	r3
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7f2      	b.n	8004f5a <__libc_init_array+0x1e>
 8004f74:	080051dc 	.word	0x080051dc
 8004f78:	080051dc 	.word	0x080051dc
 8004f7c:	080051dc 	.word	0x080051dc
 8004f80:	080051e0 	.word	0x080051e0

08004f84 <__retarget_lock_acquire_recursive>:
 8004f84:	4770      	bx	lr

08004f86 <__retarget_lock_release_recursive>:
 8004f86:	4770      	bx	lr

08004f88 <memset>:
 8004f88:	4402      	add	r2, r0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d100      	bne.n	8004f92 <memset+0xa>
 8004f90:	4770      	bx	lr
 8004f92:	f803 1b01 	strb.w	r1, [r3], #1
 8004f96:	e7f9      	b.n	8004f8c <memset+0x4>

08004f98 <cleanup_glue>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	6809      	ldr	r1, [r1, #0]
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	b109      	cbz	r1, 8004fa6 <cleanup_glue+0xe>
 8004fa2:	f7ff fff9 	bl	8004f98 <cleanup_glue>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fae:	f000 b869 	b.w	8005084 <_free_r>
	...

08004fb4 <_reclaim_reent>:
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <_reclaim_reent+0xb4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4283      	cmp	r3, r0
 8004fba:	b570      	push	{r4, r5, r6, lr}
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	d051      	beq.n	8005064 <_reclaim_reent+0xb0>
 8004fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fc2:	b143      	cbz	r3, 8004fd6 <_reclaim_reent+0x22>
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d14a      	bne.n	8005060 <_reclaim_reent+0xac>
 8004fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fcc:	6819      	ldr	r1, [r3, #0]
 8004fce:	b111      	cbz	r1, 8004fd6 <_reclaim_reent+0x22>
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 f857 	bl	8005084 <_free_r>
 8004fd6:	6961      	ldr	r1, [r4, #20]
 8004fd8:	b111      	cbz	r1, 8004fe0 <_reclaim_reent+0x2c>
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 f852 	bl	8005084 <_free_r>
 8004fe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004fe2:	b111      	cbz	r1, 8004fea <_reclaim_reent+0x36>
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f000 f84d 	bl	8005084 <_free_r>
 8004fea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004fec:	b111      	cbz	r1, 8004ff4 <_reclaim_reent+0x40>
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f000 f848 	bl	8005084 <_free_r>
 8004ff4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ff6:	b111      	cbz	r1, 8004ffe <_reclaim_reent+0x4a>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 f843 	bl	8005084 <_free_r>
 8004ffe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005000:	b111      	cbz	r1, 8005008 <_reclaim_reent+0x54>
 8005002:	4620      	mov	r0, r4
 8005004:	f000 f83e 	bl	8005084 <_free_r>
 8005008:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800500a:	b111      	cbz	r1, 8005012 <_reclaim_reent+0x5e>
 800500c:	4620      	mov	r0, r4
 800500e:	f000 f839 	bl	8005084 <_free_r>
 8005012:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005014:	b111      	cbz	r1, 800501c <_reclaim_reent+0x68>
 8005016:	4620      	mov	r0, r4
 8005018:	f000 f834 	bl	8005084 <_free_r>
 800501c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800501e:	b111      	cbz	r1, 8005026 <_reclaim_reent+0x72>
 8005020:	4620      	mov	r0, r4
 8005022:	f000 f82f 	bl	8005084 <_free_r>
 8005026:	69a3      	ldr	r3, [r4, #24]
 8005028:	b1e3      	cbz	r3, 8005064 <_reclaim_reent+0xb0>
 800502a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800502c:	4620      	mov	r0, r4
 800502e:	4798      	blx	r3
 8005030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005032:	b1b9      	cbz	r1, 8005064 <_reclaim_reent+0xb0>
 8005034:	4620      	mov	r0, r4
 8005036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800503a:	f7ff bfad 	b.w	8004f98 <cleanup_glue>
 800503e:	5949      	ldr	r1, [r1, r5]
 8005040:	b941      	cbnz	r1, 8005054 <_reclaim_reent+0xa0>
 8005042:	3504      	adds	r5, #4
 8005044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005046:	2d80      	cmp	r5, #128	; 0x80
 8005048:	68d9      	ldr	r1, [r3, #12]
 800504a:	d1f8      	bne.n	800503e <_reclaim_reent+0x8a>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 f819 	bl	8005084 <_free_r>
 8005052:	e7ba      	b.n	8004fca <_reclaim_reent+0x16>
 8005054:	680e      	ldr	r6, [r1, #0]
 8005056:	4620      	mov	r0, r4
 8005058:	f000 f814 	bl	8005084 <_free_r>
 800505c:	4631      	mov	r1, r6
 800505e:	e7ef      	b.n	8005040 <_reclaim_reent+0x8c>
 8005060:	2500      	movs	r5, #0
 8005062:	e7ef      	b.n	8005044 <_reclaim_reent+0x90>
 8005064:	bd70      	pop	{r4, r5, r6, pc}
 8005066:	bf00      	nop
 8005068:	24000014 	.word	0x24000014

0800506c <__malloc_lock>:
 800506c:	4801      	ldr	r0, [pc, #4]	; (8005074 <__malloc_lock+0x8>)
 800506e:	f7ff bf89 	b.w	8004f84 <__retarget_lock_acquire_recursive>
 8005072:	bf00      	nop
 8005074:	240041a4 	.word	0x240041a4

08005078 <__malloc_unlock>:
 8005078:	4801      	ldr	r0, [pc, #4]	; (8005080 <__malloc_unlock+0x8>)
 800507a:	f7ff bf84 	b.w	8004f86 <__retarget_lock_release_recursive>
 800507e:	bf00      	nop
 8005080:	240041a4 	.word	0x240041a4

08005084 <_free_r>:
 8005084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005086:	2900      	cmp	r1, #0
 8005088:	d048      	beq.n	800511c <_free_r+0x98>
 800508a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508e:	9001      	str	r0, [sp, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f1a1 0404 	sub.w	r4, r1, #4
 8005096:	bfb8      	it	lt
 8005098:	18e4      	addlt	r4, r4, r3
 800509a:	f7ff ffe7 	bl	800506c <__malloc_lock>
 800509e:	4a20      	ldr	r2, [pc, #128]	; (8005120 <_free_r+0x9c>)
 80050a0:	9801      	ldr	r0, [sp, #4]
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	4615      	mov	r5, r2
 80050a6:	b933      	cbnz	r3, 80050b6 <_free_r+0x32>
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	6014      	str	r4, [r2, #0]
 80050ac:	b003      	add	sp, #12
 80050ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b2:	f7ff bfe1 	b.w	8005078 <__malloc_unlock>
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	d90b      	bls.n	80050d2 <_free_r+0x4e>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	1862      	adds	r2, r4, r1
 80050be:	4293      	cmp	r3, r2
 80050c0:	bf04      	itt	eq
 80050c2:	681a      	ldreq	r2, [r3, #0]
 80050c4:	685b      	ldreq	r3, [r3, #4]
 80050c6:	6063      	str	r3, [r4, #4]
 80050c8:	bf04      	itt	eq
 80050ca:	1852      	addeq	r2, r2, r1
 80050cc:	6022      	streq	r2, [r4, #0]
 80050ce:	602c      	str	r4, [r5, #0]
 80050d0:	e7ec      	b.n	80050ac <_free_r+0x28>
 80050d2:	461a      	mov	r2, r3
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	b10b      	cbz	r3, 80050dc <_free_r+0x58>
 80050d8:	42a3      	cmp	r3, r4
 80050da:	d9fa      	bls.n	80050d2 <_free_r+0x4e>
 80050dc:	6811      	ldr	r1, [r2, #0]
 80050de:	1855      	adds	r5, r2, r1
 80050e0:	42a5      	cmp	r5, r4
 80050e2:	d10b      	bne.n	80050fc <_free_r+0x78>
 80050e4:	6824      	ldr	r4, [r4, #0]
 80050e6:	4421      	add	r1, r4
 80050e8:	1854      	adds	r4, r2, r1
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	d1dd      	bne.n	80050ac <_free_r+0x28>
 80050f0:	681c      	ldr	r4, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	6053      	str	r3, [r2, #4]
 80050f6:	4421      	add	r1, r4
 80050f8:	6011      	str	r1, [r2, #0]
 80050fa:	e7d7      	b.n	80050ac <_free_r+0x28>
 80050fc:	d902      	bls.n	8005104 <_free_r+0x80>
 80050fe:	230c      	movs	r3, #12
 8005100:	6003      	str	r3, [r0, #0]
 8005102:	e7d3      	b.n	80050ac <_free_r+0x28>
 8005104:	6825      	ldr	r5, [r4, #0]
 8005106:	1961      	adds	r1, r4, r5
 8005108:	428b      	cmp	r3, r1
 800510a:	bf04      	itt	eq
 800510c:	6819      	ldreq	r1, [r3, #0]
 800510e:	685b      	ldreq	r3, [r3, #4]
 8005110:	6063      	str	r3, [r4, #4]
 8005112:	bf04      	itt	eq
 8005114:	1949      	addeq	r1, r1, r5
 8005116:	6021      	streq	r1, [r4, #0]
 8005118:	6054      	str	r4, [r2, #4]
 800511a:	e7c7      	b.n	80050ac <_free_r+0x28>
 800511c:	b003      	add	sp, #12
 800511e:	bd30      	pop	{r4, r5, pc}
 8005120:	240040b0 	.word	0x240040b0

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
